{
  "hash": "c291ac480c4b3b0439896647f279e4a8",
  "result": {
    "markdown": "# Code management {#sec-codemgmt}\n\n**Chapter lead author: Koen Hufkens**\n\n## Learning objectives\n\nIn this chapter you will learn how to manage your code with common version control tools, i.e., *git.*\n\nYou will learn how to:\n\n-   Create a git project (new or from a template)\n-   Track changes in your code project\n-   Collaborate with others\n-   Ensure reproducibility of your project by openly sharing your work and progress.\n\n\n\n## Tutorial\n\nCode management is key for managing any data science project, especially when collaborating. Proper code management limits mistakes, such as code loss, and increases efficiency by structuring projects.\n\nIn this chapter, we will discuss the management of code in both the location sense, where things are kept, and tracking temporal changes over time using a version control system.\n\nCurrent version control of code is dominated by the software tool *git*. However, version control has a long history and can be found not only in code development practices. For example, whenever you use track changes in a text document, you apply a form of version control. That is, you track changes in your text over time and selectively accept changes. In this respect, *git*, as a tool for version control of code, does not differ much from track changes of a text document. In contrast to track changes in a text document, with *git* the user has manual control over *staging* and *committing* edits on a file.\n\n![The git workflow- by Paola Corrales and Elio Campitelli](https://eliocamp.github.io/reproducibility-with-r/materials/day2/02-git/images/file_cycle2.png){#fig-gitworkflow width=100% fig.align='center'}\n\n*Git* allows for the collaboration of multiple contributors on the same code and manages the integration of contributions into the repository. Built upon *git* are cloud-based platforms such as [GitHub](https://github.com), [GitLab](https://gitlab.com), [Codeberg](https://codeberg.org), or [Bitbucket](https://bitbucket.org/) which make these collaborative decisions and operations even easier.\n\n![The github remote workflow- by Paola Corrales and Elio Campitelli](https://eliocamp.github.io/reproducibility-with-r/materials/day2/02-git/images/local_remote.png){#fig-githubworkflow width=100% fig.align='center'}\n\nIn this chapter, you will learn how to use *git* and GitHub to manage your project and collaborate on code.\n\n> NOTE: Coding style, and documentation practices of the code itself have been covered previously in @sec-programmingprimers. Although the tutorial below focuses on GitHub, the jargon and operations are transferable to other platforms such as [GitLab](https://gitlab.com) and [Codeberg](https://codeberg.org).\n\n### Git and local version control {#sec-gitworkflow}\n\n*Git* allows for the tracking of changes in code (or any file) within a git project. A *git* project is defined by the topmost directory in which a *git* project is created. For example, the following project is not tracked for changes using git.\n\n``` bash\nproject/\n├─ YOUR_PROJECT.Rproj\n```\n\nYou can start tracking a project by initiating a local *git* repository using the following code in R. We'll use the {usethis} package to make some of the setup a project easier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git()\n```\n:::\n\n\nThis will create a *git* repository in your project. It will also create a `.gitignore` file which specifies which files NOT to track (even if asked to). In addition it will make an first commit.\n\n#### git add {#sec-git-add}\n\nBefore we can track anything, we need to tell *git* which files to track. In *git*-speak, we *stage* the files. We therefore have to `add` them to an index of tracked files. You can either do this on the command line using:\n\n``` bash\ngit add your_file.csv\n```\n\nOr using the RStudio **Git** panel. In this panel, you will see all un-tracked files or directories highlighted with a yellow question mark.\n\n![Unstaged files in a git enabled R project.](./figures/git_unstaged_files.png){#fig-unstagedfiles width=80% fig.align='center'}\n\nYou select the file tick boxes to the left to stage all files for inclusion into the *git* repository. Once staged, the next step will be to finally commit these staged files to be included in *git* tracking.\n\n![Staged files in a git enabled R project.](./figures/git_staged_files.png){#fig-stagedfiles width=80% fig.align='center'}\n\n#### git commit\n\nTo store any changes to the files which were staged we need to `commit` these changes. We therefore hit the commit button. A new window will pop up.\n\n![Entering a commit message.](./figures/git_commit_message.png){#fig-commitmessage width=80% fig.align='center'}\n\nEach commit needs a brief message describing what you have included in the staged files, or the commit message, as shown in the panel on the right. You need to provide this small message before pressing the commit button once more. This will let *git* track the changes to these files. A message will be shown if the commit is successful.\n\n![A completed commit.](./figures/git_commit_completed.png){#fig-commitcompleted width=80% fig.align='center'}\n\nWith this, you will track all files locally. Any new changes to a file will need to be committed to the *git* repository once more. So, unlike cloud services such as Dropbox, your files are not automatically tracked. Instead, this is a manual step. As with normal documents, you are advised to save (commit) your changes to your project frequently. And remember, if you create a new file, you will need to `add` it before you can `commit` it.\n\nYou can `commit` changes of staged files using the command line as well using the following command.\n\n``` bash\ngit commit -m \"A message\"\"\n```\n\n### Remote version control\n\nKeeping files and working with *git* locally limit the extent in which you can collaborate with others. This is where remote cloud-based *git* solutions, such as [GitHub](https://github.com), [GitLab](https://gitlab.com) and [Codeberg](https://codeberg.org), come in. They provide a cloud-based *git* repository which you can associate with your local project (see figure above).\n\nTo create a remote project and successfully associate it with an R project, we first have to specify some details, such as the user name and email you used is singing up for [GitHub](https://github.com). To not leave your R session, you can use the {usethis} package for this.\n\n``` r\n# Configure your project\nlibrary(usethis)\nusethis::use_git_config(user.name = \"Jane Doe\",\n               user.email = \"jane@example.org\")\n```\n\nFor security reasons, the use of your GitHub password is not allowed in remote actions. You therefore need to generate a personal access token (PAT) which can be restricted in time and functionality. To proceed, first generate a GitHub PAT using [these instructions](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-personal-access-token-classic).\n\nTo create a new project on GitHub, hit the \"+\" sign top left on the GitHub main page (once logged in), and select the \"new repository\" from the dropdown menu.\n\n![Create a new github repository.](./figures/git_new_project.png){#fig-newgithubrepo width=30% fig.align='center'}\n\nA new interface will open up in which you should not use any template, but specify your own project name and brief description. Make sure your project is public, and all other settings are kept as is before you hit the \"Create repository\" button.\n\n![Set the github project name.](./figures/git_new_project_settings.png){#fig-newgithubsettings width=60% fig.align='center'}\n\nNote the URL that is generated for your project. You will need it when creating a new RStudio project linked to GitHub.\n\n![A repository link you need during the R project wizard.](./figures/git_project_link.png){#fig-githubsetup width=80% fig.align='center'}\n\nNext, we'll setup an R project which is associated with the repository. Use: File \\> New Project \\> Version Control \\> Git.\n\n![Linking the github project to a new git enabled R project.](./figures/git_project_wizard.png){#fig-projectwizard width=40% fig.align='center'}\n\nIn the \"repository URL\", paste the URL of your new GitHub repository. In the example above, this would be `https://github.com/khufkens/YOUR_PROJECT.git`. Select a location where to store the project, select the \"Open in new session\" option and click \"Create Project\". A window will pop up, asking for your GitHub username and a password. This password is *not* your GitHub login password but the PAT described above. After entering your credential, RStudio creates a `\\*.Proj` file as well as a `.gitignore` file. You can add both files as you would otherwise (see @sec-git-add, and these files are tracked locally.\n\n#### git push\n\nOnce a remote git service has been configured, you can push your local *git* repository to this remote repository, i.e. syncing both. You can use both the push buttons in the RStudio panel for this or the command line using `git push`. At the end of a day or a session, it is always advised to `push` your changes to your remote repository to store any changes.\n\n> NOTE: Syncing between GitHub and your local repository is a manual task. If not performed the repository, it will not be synced. To retain all your changes, sync both repositories often!\n\n![Remote git workflow - by Paola Corrales and Elio Campitelli](https://eliocamp.github.io/reproducibility-with-r/materials/day2/02-git/images/pull-request.png){#fig-remotegithubworkflow width=100% fig.align='center'}\n\n#### git pull and merge conflicts\n\n`git pull` compares your local *git* repository with the remote one and integrates the more recent changes if there are any. Note that if you make changes on the same line in file on both sides, i.e., in the remote (e.g., by another person) and in the local repository at the same time, you will generate a *merge conflict*. A merge conflict states that the remote and local changes can't be reconciled without supervised intervention on your part. Changes will be made to your local repository, but the files will include the below syntax for highlighting conflicting differences.\n\n``` bash\n    <<<<<<<<<<\n    Edited line from remote\n    ==========\n    Edited same line locally\n    >>>>>>>>>>\n```\n\nYou will need to remove the \\<\\<\\<, === and \\>\\>\\> brackets and retain the changes you want to keep for resolving the conflict. Then, commit the changes again.\n\n#### git clone\n\nYou can create a local copy of your remote repository that's hosted on GitHub using the `git clone` command. For example, on the command line, you can use:\n\n``` bash\n# create a local copy of the remote github repository\ngit clone git@github.com:khufkens/YOUR_PROJECT.git\n```\n\nYou can then start working on this repository by using the modify -\\> staged -\\> commit -\\> push workflow.\n\n#### git fork and pull request\n\nYou can also create a copy of any public GitHub project from into your own GitHub account by creating a *fork*. You can create a fork of a project by clicking the **fork** button top right on any public GitHub project page. The number of forks of a project is displayed next to the button. In case of the {rpmodel} package there are currently 24 forks of the project.\n\n![Creating a fork of an existing project (rpmodel)](./figures/git_fork.png){#fig-creatingforks width=80% fig.align='center'}\n\nYou can give the forked project a new name and description if so desired.\n\n![Github fork settings](./figures/git_fork_settings.png){#fig-forksettings width=60% fig.align='center'}\n\nA fork allows you to experiment with the code stored in the original project without affecting the original repository. However, the relation to the original project is maintained. If you want to contribute changes to the original project you can do so with a **pull request**.\n\n> NOTE: To make changes to a forked project, you will first have to `clone` it to your local system. See workflow above.\n\nIn a forked project, go to the **Pull requests** tab and click the green **New pull request** button. You will then have to provide a description of the changes you made. This information will be forwarded to the original owner of the project, who can accept these changes and accept the pull request and \"pull\" in the changes.\n\n![Creating a new github pull request](./figures/git_pull_request.png){#fig-pullrequest width=60% fig.align='center'}\n\n### Location based code management - github templates\n\nBoth code (and data) management require you to be conscientious about where you store your code (and data). Structuring your projects using the same template will allow you to understand where all pieces of an an analysis are stored. This has been mentioned in @sec-openscience.\n\nIn our [R project template](https://github.com/geco-bern/R_proj_template), we provide a project structure for both data and code which removes the mental overhead of structuring data projects. This project structure sorts code, data and reporting in a consistent way.\n\nYou can use the template in combination with a GitHub-based version control approach to manage your projects. Simply create a new project from this template and clone the project to your local computer. Any changes to the project can be tracked by the workflows described above.\n\nTo use the template, create a new repository on GitHub, as you otherwise would using the big green button. If you are in the project on GitHub, you can hit the green button top right (**Use this template**).\n\n![Use a github project as a template](./figures/r_proj_template.png){#fig-projecttemplate width=80% fig.align='center'}\n\nOtherwise, you can select the repository from the template dropdown menu, select `geco-bern/R-project-template`. \n\n![Using a new template based repository](./figures/create_from_template.png){#fig-newtemplaterepository width=60% fig.align='center'}\n\nProceed as usual by naming your repository. However, be careful to select the correct owner of the project if you have multiple identities. Rename the default `.Proj` file.\n\n![Assigning a new template based repository](https://github.com/bluegreen-labs/environmental_data_science_101/raw/main/images/new_repo_2.png){#fig-newtemplaterepositoryname width=60% fig.align='center'}\n\nYou can now clone the project to your local computer and continue to populate it with code and data.\n\n## Exercises\n\n### Location based code management {-}\n\nCreate a new R project using the *git* R project template shown above.\n\n-   Make some changes to the README.md\n\n-   Put a small data set in the appropriate directory.\n\n-   Make sure that both local and remote repositories (projects) are synced.\n\n## Report Exercises\n\n### Collaborative Work on Github {-}\n\nThis is a team exercise, so team up with someone else in the classroom. You will learn about how to collaborate online using *git* and Github. \n\n> Important: When creating your repositories, make sure that you set the repository to be public and not private.\n\n-  Person 1 - Create a new repository (can be the same as you created following the tutorial but should no be the same as the one where you hand in your report)\n\n-  Person 2 - Fork the GitHub project that Person 1 created in Step 1.\n\n-  Person 2 - Create a new file in this project\n\n-  Person 2 - Commit and push these changes to this project. Create a **pull request** to the original project of Person 1.\n\n-  Person 1 - Review the pull request from Person 2. Provide some comments, accept the pull request, letting it the new code by Person 2 be integrated into the project.\n\n-  Person 1 - Add a new file to your own project, and update the GitHub project.\n\n-  Person 2 - Sync your forked project to integrate the changes made by Person 1 into your own repository.\n\n-  *Voluntary:* Can you force a merge conflict, for example by editing the same file at once, and resolve?\n\nTo complete the exercise, reverse rolls between Person 1 and Person 2.\n\n### Deliverables for the report {.unnumbered}\n\nThis pair-coding exercise is part of your final performance assessment.  We will check each repositories' commit history to see whether this pair-coding exercise was done correctly. So, follow the steps above precisely!\n\nWhen you submit your report by mail at the end of the course, you have to provide the links to your GitHub account, to your report repositories that holds all other report exercises, and to the two repositories that you created during this pair-coding work exercise (your repository that your friend forked and the repository that you forked from your friend). Alternatively you can also create a `./vignettes/re_paircoding.Rmd` in your report repository, where you provide these links.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}