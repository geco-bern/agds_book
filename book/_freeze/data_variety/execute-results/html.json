{
  "hash": "bb8dbe813d8d8ec908379db0351f802d",
  "result": {
    "markdown": "# Data variety {#sec-datavariety}\n\n**Chapter lead author: Koen Hufkens**\n\n## Learning objectives\n\nAs a scientist you will encounter a variety of data (formats). In this section, you will learn some of the most common formats, their structure, and the advantages and disadvantages of using a particular data format. Only singular files are considered in this section, and [databases](https://en.wikipedia.org/wiki/Database) are not covered although some files (formats) might have a mixed use.\n\nMore and more data moves toward a cloud server-based model where data is queried from an online database using an [Application Programming Interface (API)](https://en.wikipedia.org/wiki/API). Although the explicit use of databases is not covered, you will learn basic API usage to query data which is not represented as a file.\n\nIn this chapter you will learn:\n\n-   how to recognize data and file formats\n-   understand data and file format limitations\n    -   manipulation wise\n    -   content wise\n-   how to read and/or write data in a particular file format\n-   how to query an API and store its data locally\n\n## Setup\nIn this Chapter, we will need the following libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(dplyr)\n```\n:::\n\n\n## Tutorial\n\n### Files and file formats\n\n#### File extensions\n\nIn order to manipulate data and make some distinctions on what a data file might contain, files carry a particular [file format extension](https://en.wikipedia.org/wiki/Filename_extension). These file extensions denote the intended content and use of a particular file.\n\nFor example, a file ending in `.txt` suggests that it contains text. A file extension allows you, or a computer, to anticipate the content of a file without opening the file.\n\nFile extensions are therefore an important tool in assessing what data you are dealing with, and what tools you will need to manipulate (read and write) the data.\n\n> NOTE: File extensions can be changed. In some cases, the file extension does not represent the content of the data contained within the file.\n\n> TIP: If a file doesn't read, it is always wise to try to open the file in a text editor and check the first few lines to verify if the data has a structure that corresponds to the file extension.\n>\n> ``` bash\n> # On a linux/macos system you can use the terminal command (using \n> # the language bash) to show the first couple lines of a file\n> head your_file\n>\n> # alternatively you can show the last few lines\n> # of a file using\n> tail your_file\n> ```\n\n#### Human-readable data\n\nOne of the most important distinctions in data formats falls along the line of it being human-readable or not. Human-readable data is, as the term specifies, made up of normal text characters. Human-readable text has the advantage that it is easily read and edited using conventional text editors. This convenience comes at the cost of the files not being compressed in any way, and file sizes can become unnecessarily large. However, for many applications where file sizes are limited (\\<50MB), human-readable formats are the preferred option. Most human-readable data falls in two broad categories, *tabular* data and *structured* data.\n\n##### Tabular data {.unnumbered}\n\nOften, human-readable formats provide data in tabular form using a consistent delimiter. This delimiter is a character separating columns of a table.\n\n    column_one, column_two, column_three\n    1, 2, 3\n    1, 2, 3\n    1, 2, 3\n\nCommon delimiters in this context are the comma (`,`), as shown in the above example. A file with this particular format often carries the [comma-separated values file extension (\\*.csv)](https://en.wikipedia.org/wiki/Comma-separated_values). Other delimiters are the [tabulation (tab) character](https://en.wikipedia.org/wiki/Tab_key#Tab_characters). Files with tab delimited values have the \\*.tsv format.\n\n> TIP: File extensions aren't always a true indication of the delimiter used. For example, `.txt` files often contain comma or tab separated data. If reading a file using a particular delimiter fails it is best to check the first few lines of a file.\n\n##### Structured data {.unnumbered}\n\nTabular data is row and column-oriented and therefore doesn't allow complex structured content, e.g. tables within tables. This issue is sidestepped by the [JSON format](https://www.json.org/json-en.html). The JSON format uses attribute-value pairs to store data, and is therefore more flexible in terms of accommodating varying data structures. Below, you see an example of details describing a person, with entries being fo varying length and data types.\n\n``` json\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"isAlive\": true,\n  \"age\": 27,\n  \"address\": {\n    \"streetAddress\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10021-3100\"\n  },\n  \"phoneNumbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [\n      \"Catherine\",\n      \"Thomas\",\n      \"Trevor\"\n  ],\n  \"spouse\": null\n}\n```\n\n> NOTE: Despite being human-readable, a JSON file is considerably harder to read than a comma separated file. Editing such a file is therefore more prone to errors if not automated.\n\nOther human-readable structured data formats include the eXtensible Markup Language (XML), which is commonly used in web infrastructure. XML is used for storing, transmitting, and reconstructing arbitrary data but uses (text) markup instead of attribute-value pairs.\n\n``` xml\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n<body>Don't forget me this weekend!</body>\n</note>\n```\n\n#### Writing and reading human-readable files in R\n\nThere are a number of ways to read human-readable formats into an R work environment. Here the basic approaches are listed, in particular reading `CSV` and `JSON` data.\n\nLarge volumes of data are available as `CSV` files or similar. Understanding how to read in such data into a programming environment is key. In this context the `read.table()` function is a general purpose tool to read in text data. Depending on the format, additional meta-data or comments, and certain parameters need to be specified.\n\nIts counterpart is a function to write human-readable data to file, called - you guessed it - `write.table()`. Again, parameters are required for maximum control over how things are written to file, by default though data are separated by a single empty space \" \", not a comma.\n\n> Note: In @sec-datawrangling, we used the {readr} (tidyverse) function `read_csv()`. It serves the same purpose as `read.csv()`, but is faster and reads data into a tidyverse-data frame (a *tibble*) which has some useful additional characteristics, on top of a common R data frame. For particularly large data, you may consider even better solutions for fast reading, see [here](https://cran.rstudio.com/web/packages/vroom/vignettes/benchmarks.html).\n\nBelow, you find and example in which a file is written to a temporary location, and read in again using the above mentioned functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a data frame with demo data\ndf <- data.frame(\n  col_1 = c(\"a\", \"b\", \"c\"),\n  col_2 = c(\"d\", \"e\", \"f\"),\n  col_3 = c(1,2,3)\n)\n\n# write table as CSV to disk\nwrite.table(\n  x = df,\n  file = file.path(tempdir(), \"your_file.csv\"),\n  sep = \",\",\n  row.names = FALSE\n)\n\n# Read a CSV file\ndf <- read.table(\n  file.path(tempdir(), \"your_file.csv\"),\n  header = TRUE,\n  sep = \",\"\n)\n\n# help files of both functions can be accessed by\n# typing ?write.table or ?read.table in the R console\n```\n:::\n\n\nIn this example, a data frame is generated with three columns. This file is then written to a temporary file in the temporary file directory `tempdir()`. Here, `tempdir()` returns the location of the temporary R directory, which you can use to store intermediate files.\n\nWe use the `file.path()` function to combine the path (`tempdir()`) with the file name (`your_file.csv`). Using `file.path()` is good practice as directory structures are denoted differently between operating systems, e.g., using a backslash (`\\`) on Windows vs. a slash (`/`) on Unix-based systems (Linux/macOS). The `file.path()` function ensures that the correct directory separator is used.\n\nNote that in this command, we have to manually set the separator (`sep = \",\"`) and whether a header is present (`header = TRUE`). Depending on the content of a file, you will have to alter these parameters. Additional parameters of the `read.table()` function allow you to specify comment characters, skip empty lines, etc.\n\nSimilar to this simple `CSV` file, we can generate and read `JSON` files. For this, we do need an additional library, as default R install does not provide this capability. However, the rest of the example follows the above workflow.\n\n\n::: {.cell messages='false'}\n\n```{.r .cell-code}\n# we'll re-use the data frame as generated for the CSV\n# example, so walk through the above example if you\n# skipped ahead\n\n# load the library\nlibrary(\"jsonlite\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# write the file to a temporary location\njsonlite::write_json(\n  x = df,\n  path = file.path(tempdir(), \"your_json_file.json\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# read the freshly generated json file\ndf_json <- jsonlite::read_json(\n  file.path(tempdir(), \"your_json_file.json\"),\n  simplifyVector = TRUE\n)\n\n# check if the two data sets\n# are identical (they should be)\nidentical(df, df_json)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nNote that the reading and writing `JSON` data is easier, as the structure of the data (e.g., field separators) are more strictly defined. While reading the data, we use the `simplifyVector` argument to return a data frame rather than a nested list. This works as our data has a tabular structure, but this might not always be the case. Finally, we compare the original data with the data read in using `identical()`.\n\n> TIP: In calling the external library we use the `::` notation. Although by loading the library with `library()` makes all `jsonlite` functions available, the explicit referencing of the origin of the function makes debugging often easier.\n\n#### Binary data\n\nAll digital data which is not represented as text characters can be considered binary data. Binary data can vary in its content from an executable, which runs a program, to the digital representation of an image (jpeg images). However, in all cases, the data is represented as bytes (made of eight bits) and not text characters.\n\nOne of the advantages of binary data is that it is an efficient representation of data, saving space. This comes at the cost of requiring a dedicated software, other than a text editor, to manipulate the data. For example, digital images in a binary format require image manipulation software.\n\nMore so than human-readable data, the file format (extension) determines how to treat the data. Knowing common data formats and their use cases is therefore key.\n\n#### Common file formats\n\nEnvironmental sciences have particular file formats which dominate the field. Some of these file formats relate to the content of the data, some of these formats are legacy formats due to the history of the field itself. Here we will list some of the most common formats you will encounter.\n\n| File format (extension) | Format description                                             | Use case                                                                                                                            | R Library            |\n|---------------|---------------|----------------------------|---------------|\n| \\*.csv                  | comma separated tabular data                                 | General purpose flat files with row and column oriented data                                                                        | base R               |\n| \\*.txt                  | tabular data with various delimiters                         | General purpose flat files with row and column oriented data                                                                        | base R               |\n| \\*.json                 | structured human-readable data                                 | General purpose data format. Often used in web application. Has geospatial extensions (geojson).                                    | jsonlite             |\n| \\*.nc                   | [NetCDF data](https://en.wikipedia.org/wiki/NetCDF) array data | Array-oriented data (matrices with \\> 2 dimensions). Commonly used to store climate data or model outputs. Alternative to HDF data. | ncdf4, terra, raster |\n| \\*.hdf                  | HDF array data                                                 | Array-oriented data (matrices with \\> 2 dimensions). Commonly used to store Earth observation data.                          | hdf                  |\n| \\*.tiff, \\*.geotiff     | Geotiff multi-dimensional raster data (see below)              | Layered (3D) raster (image) data. Commonly used to represent spatial (raster) data.                                                 | terra, raster        |\n| \\*.shp                  | Shapefile of vector data (see below)                           | Common vector based geospatial data. Used to describe data which can be captured by location/shape and attribute values.            | sp, sf               |\n\n### Meta-data\n\nMeta-data is data that is associated with the main data file and is key to understanding the file content and the context of the data. In some cases, you will find this data only as a general description referencing the file(s) itself. In other cases, meta-data is included in the file itself.\n\nFor example, many tabular CSV data files contain a header specifying the content of each column, and at times a couple of lines of data specifying the content of the file itself - or context within which the data should be considered.\n\n``` bash\n# This is meta-data associated with the tabular CSV file\n# for which the data is listed below.\n# \n# In addition to some meta-data, the first row of the data\n# contains the column header data\ncolumn_one, column_two, column_three\n1, 2, 3\n1, 2, 3\n1, 2, 3\n```\n\nIn the case of binary files it will not be possible to read the meta-data directly as plain text. In this case, specific commands can be used to read the meta-data included in a file. The example below shows how you would list the meta-data of a GeoTiff file using the bash.\n\n``` bash\n# list geospatial data for a geotiff file\ngdalinfo your_geotiff.tiff\n```\n\n> TIP: Always keep track of your meta-data by including it, if possible, in the file itself. If this is not possible, meta data is often provided in a file called `README`. Meta-data is key in making science reproducible and guaranteeing consistency between projects. Key meta-data to retain are:\n>\n> -   the source of your data (URL, manuscript, DOI)\n>\n> -   the date when the data was downloaded\n>\n> -   manipulations on the data before using the data in a final workflow\n\nMeta-data of data read into R can be accessed by printing the object itself, i.e., calling the object in the console. If it is a simple table, the first lines of the table will be shown. If it is a more complex object, the meta data will be output as a formatted statement. You can also use the `str()` or `summary()` functions to summarize data and meta-data.\n\n### Spatial data representation\n\nEnvironmental data often has an explicit spatial and temporal component. For example, climate data is often represented as 2D maps which vary over time. This spatial data requires an additional level of understanding of commonly used data formats and structures.\n\nIn general, we can distinguish two important data models when dealing with spatial data, the [raster](https://wiki.gis.com/wiki/index.php/Raster_data_model) and [vector data model](https://wiki.gis.com/wiki/index.php/Vector_data_model). Both data have their typical file formats (see above) and particular use cases. The definition of these formats, optimization of storage and math/logic on such data are the topic of Geographic Information System (GIS) science and beyond the scope of this course. We refer to other elective GIS courses for a greater understanding of these details. However, a basic understanding of both raster and vector data is provided here.\n\n#### Raster data model\n\nThe basic raster model represents geographic (2D) continuous data as a two-dimensional array, where each position has a geographic (x, y) coordinate, a cell size (or resolution) and a given extent. Using this definition, any image adheres to the raster model. However, in most geographic applications, coordinates are referenced and correspond to a geographic position, e.g., a particular latitude and longitude. Often, the model is expanded with a time dimension, stacking various two-dimensional arrays into a three-dimensional array.\n\nThe raster data model is common for all data sources which use either imaging sensors, such as satellites or unmanned aerial vehicles (UAVs), or outputs of models that operate on a cartesian grid, including most climate and numerical weather prediction models.\n\nAdditional meta data stores both the geographic reference system, the definition and format of the time information, and well as other data which might be helpful to end users (e.g., variable units). Within the environmental sciences, NetCDF and GeoTiff are common raster data file formats.\n\n#### Vector data model\n\nThe vector data model, in contrast to the raster data model, describes (unbound) features using a geometry (location, shape) using coordinates and linked feature attributes. Geometries can be points, lines, polygons, or even volumes.\n\nVector data does not have a defined resolution, making them scale-independent. This makes the vector data model ideal for discrete features such as roads or building outlines. Conversely, vector data is poorly suited for continuous data.\n\nConversions between the vector and raster model are possible, but limitations apply. For example, when converting vector data to raster data a resolution needs to be specified, as you lose scale independence of the vector format. Conversions from raster to vector are similarly limited by the original resolution of the raster data. In this course we will focus on raster data only, the most common format within the context of data science.\n\n### Online data sources\n\nThe sections above assume that you have inherited some data from someone, or have data files on disk (in a particular format). Yet, most of the time, gathering data is the first step in any analysis. Depending on where data is hosted you can simply download data through your web browser or use the internal `download.file()` R function to grab data.\n\nToday, many of the data described in previous sections are warehoused in large cloud facilities. These data (and their underlying data formats) are stored in large databases and displayed through various applications. For example, Google Maps displays remote sensing (satellite) raster image data in addition to street level vector based labels. These services allow you to access the underlying (original) data using an API, hence programmatically using code. Mastering the use of these services has become key in gathering research data.\n\n#### Direct downloads\n\nBefore diving into a description of APIs, we remind you that some file reading functions in R are web-aware, and can not only read local files but also remote ones (i.e., URLs). Getting ahead of ourselves a bit (see tutorials below), the example code shows you how to read the content of a URL directly into your R environment.\n\nAlthough using this functionality isn't equivalent to using an API, the concept is the same. I.e., you load a remote data source.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define a URL with data of interest\n# in this case annual mean CO2 levels at Mauna Loa\nurl <- \"https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_mlo.csv\"\n\n# read in the data directly from URL\ndf <- read.table(\n  url,\n  header = TRUE,\n  sep = \",\"\n)\n```\n:::\n\n\n#### APIs\n\nWeb-based Application Programming Interfaces (APIs) offer a way to specify the scope of the returned data, and ultimately, the processing which goes on behind the scene in response to a (data) query. APIs are a way to, in a limited way, control a remote server to execute a certain (data) action. In most (RESTful) APIs, such query takes the form of an HTTP URL via an URL-encoded scheme using an API endpoint (or base URL).\n\nTo reduce some of the complexity of APIs, it is common that a wrapper is written around an API in the language of choice (e.g., R, Python). These dedicated API libraries make it easier to access data and limit coding overhead.\n\n##### Dedicated API libraries {.unnumbered}\n\nAs an example of a dedicated library, we use the [{MODISTools} R package](https://github.com/bluegreen-labs/MODISTools) which queries remote sensing data generated by the MODIS remote sensing (satellite) mission from the Oak Ridge National Laboratories data archive.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the library\nlibrary(\"MODISTools\")\n\n# list all available products\nproducts <- MODISTools::mt_products()\n\n# print the first few lines\n# of available products\nprint(head(products))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       product\n1       Daymet\n2 ECO4ESIPTJPL\n3      ECO4WUE\n4       GEDI03\n5     GEDI04_B\n6      MCD12Q1\n                                                                         description\n1 Daily Surface Weather Data (Daymet) on a 1-km Grid for North America, Version 4 R1\n2               ECOSTRESS Evaporative Stress Index PT-JPL (ESI) Daily L4 Global 70 m\n3                          ECOSTRESS Water Use Efficiency (WUE) Daily L4 Global 70 m\n4                GEDI Gridded Land Surface Metrics (LSM) L3 1km EASE-Grid, Version 2\n5     GEDI Gridded Aboveground Biomass Density (AGBD) L4B 1km EASE-Grid, Version 2.1\n6              MODIS/Terra+Aqua Land Cover Type (LC) Yearly L3 Global 500 m SIN Grid\n  frequency resolution_meters\n1     1 day              1000\n2    Varies                70\n3    Varies                70\n4  One time              1000\n5  One time              1000\n6    1 year               500\n```\n:::\n\n```{.r .cell-code}\n# download a demo dataset\n# specifying a location, a product,\n# a band (subset of the product)\n# and a date range and a geographic\n# area (1 km above/below and left/right).\n# Data is returned internally and the\n# progress bar of the download is not shown.\nsubset <- MODISTools::mt_subset(\n  product = \"MOD11A2\",\n  lat = 40,\n  lon = -110,\n  band = \"LST_Day_1km\",\n  start = \"2004-01-01\",\n  end = \"2004-02-01\",\n  km_lr = 1,\n  km_ab = 1,\n  internal = TRUE,\n  progress = FALSE\n)\n\n# print the dowloaded data\nprint(head(subset))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      xllcorner  yllcorner         cellsize nrows ncols        band  units\n1.1 -9370963.05 4445948.79 926.625433055834     3     3 LST_Day_1km Kelvin\n2.1 -9370963.05 4445948.79 926.625433055834     3     3 LST_Day_1km Kelvin\n3.1 -9370963.05 4445948.79 926.625433055834     3     3 LST_Day_1km Kelvin\n4.1 -9370963.05 4445948.79 926.625433055834     3     3 LST_Day_1km Kelvin\n1.2 -9370963.05 4445948.79 926.625433055834     3     3 LST_Day_1km Kelvin\n2.2 -9370963.05 4445948.79 926.625433055834     3     3 LST_Day_1km Kelvin\n    scale latitude longitude     site product      start        end complete\n1.1  0.02       40      -110 sitename MOD11A2 2004-01-01 2004-02-01     TRUE\n2.1  0.02       40      -110 sitename MOD11A2 2004-01-01 2004-02-01     TRUE\n3.1  0.02       40      -110 sitename MOD11A2 2004-01-01 2004-02-01     TRUE\n4.1  0.02       40      -110 sitename MOD11A2 2004-01-01 2004-02-01     TRUE\n1.2  0.02       40      -110 sitename MOD11A2 2004-01-01 2004-02-01     TRUE\n2.2  0.02       40      -110 sitename MOD11A2 2004-01-01 2004-02-01     TRUE\n    modis_date calendar_date   tile     proc_date pixel value\n1.1   A2004001    2004-01-01 h09v05 2020168005635     1 13148\n2.1   A2004009    2004-01-09 h09v05 2020168010833     1 13160\n3.1   A2004017    2004-01-17 h09v05 2020168012220     1 13398\n4.1   A2004025    2004-01-25 h09v05 2020168013617     1 13412\n1.2   A2004001    2004-01-01 h09v05 2020168005635     2 13153\n2.2   A2004009    2004-01-09 h09v05 2020168010833     2 13140\n```\n:::\n:::\n\n\nA detailed description of all functions of the {MODISTools} R package is beyond the scope of this course. However, the listed command show you what a dedicated API package does. It is a shortcut to functional elements of an API. For example `mt_products()` allows you to quickly list all products without any knowledge of an API URL. Although more complex, as requiring parameters, the `mt_subset()` routine allows you to query remote sensing data for a single location (specified with a latitude `lat` and longitude `lon`), and a given date range (e.g., start, end parameters), a physical extent (in km left-right and above-below).\n\n##### GET {.unnumbered}\n\nDepending on your data source, you will either need to rely on a dedicated R package to query the API or study the API documentation. The general scheme for using an API follows the use of the `GET()` command of the {httr} R library. You define a query using API parameters, as a named list, and then use a `GET()` statement to download the data from the endpoint (`url`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# formulate a named list query to pass to httr\nquery <- list(\n  \"argument\" = \"2\",\n  \"another_argument\" = \"3\"\n)\n\n# The URL of the API (varies per product / param)\nurl <- \"https://your.service.endpoint.com\"\n\n# download data using the\n# API endpoint and query data\n# status variable will include if\n# the download was successful or not\n# the write_disk() function captures\n# data if available and writes it to\n# disk\nstatus <- httr::GET(\n  url = url,\n  query = query,\n  httr::write_disk(\n    path = \"/where/to/store/data/filename.ext\",\n    overwrite = TRUE\n  )\n)\n```\n:::\n\n\nBelow, we provide an example of using the `GET` command to download data from the [Regridded Harmonized World Soil Database (v1.2)](https://daac.ornl.gov/cgi-bin/dsviewer.pl?ds_id=1247) as hosted on the Oak Ridge National Laboratory computer infrastructure. In this case we download a subset of a global map of topsoil sand content (`T_SAND`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set API URL endpoint\n# for the total sand content\nurl <- \"https://thredds.daac.ornl.gov/thredds/ncss/ornldaac/1247/T_SAND.nc4\"\n\n# formulate query to pass to httr\nquery <- list(\n  \"var\" = \"T_SAND\",\n  \"south\" = 32,\n  \"west\" = -81,\n  \"east\" = -80,\n  \"north\" = 34,\n  \"disableProjSubset\" = \"on\",\n  \"horizStride\" = 1,\n  \"accept\" = \"netcdf4\"\n)\n\n# download data using the\n# API endpoint and query data\nstatus <- httr::GET(\n  url = url,\n  query = query,\n  httr::write_disk(\n    path = file.path(tempdir(), \"T_SAND.nc\"),\n    overwrite = TRUE\n  )\n)\n\n# to visualize the data\n# we need to load the {terra}\n# library\nlibrary(\"terra\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'terra' was built under R version 4.4.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.8.21\n```\n:::\n\n```{.r .cell-code}\nsand <- terra::rast(file.path(tempdir(), \"T_SAND.nc\"))\nterra::plot(sand)\n```\n\n::: {.cell-output-display}\n![](data_variety_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n##### Authentication {.unnumbered}\n\nDepending on the API, authentication using a user name and a key or password is required. Then, the template should be slightly altered to accommodate for these requirements. Note that instead of the `GET()` command we use `POST()` as we need to post some authentication data before we can get the data in return.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# an authenticated API query\nstatus <- httr::POST(\n  url = url,\n  httr::authenticate(user, key),\n  httr::add_headers(\"Accept\" = \"application/json\",\n                    \"Content-Type\" = \"application/json\"),\n  body = query,\n  encode = \"json\"\n)\n```\n:::\n\n\n\n## Exercises\n\n### Files and file formats {-}\n\n#### Reading and writing human-readable files {.unnumbered}\n\nWhile **not leaving your R session**, download and open the files at the following locations:\n\n``` bash\nhttps://raw.githubusercontent.com/geco-bern/agds_book/refs/heads/main/book/data/demo_1.csv\nhttps://raw.githubusercontent.com/geco-bern/agds_book/refs/heads/main/book/data/demo_2.csv\nhttps://raw.githubusercontent.com/geco-bern/agds_book/refs/heads/main/book/data/demo_3.csv\n```\n\nOnce loaded into your R environment, combine and save all data as a **temporary** `CSV` file. Read in the new temporary `CSV` file, and save it as a `JSON` file in your current working directory.\n\n\n#### Reading and writing binary files {.unnumbered}\n\nDownload and open the following file:\n\n``` r\nhttps://raw.githubusercontent.com/geco-bern/agds_book/refs/heads/main/book/data/demo_data.nc\n```\n\n1.  What file format are we dealing with?\n2.  What library would you use to read this kind of data?\n3.  What does this file contain?\n4.  Write this file to disk in a different geospatial format you desire (use the R documentation of the library used to read the file and the chapter information).\n5.  Download and open the following file:  `https://raw.githubusercontent.com/geco-bern/agds_book/refs/heads/main/book/data/demo_data.tif`. Does this data seem familiar, and how can you tell? What are your conclusions?\n\n### API use {-}\n\n#### GET {.unnumbered}\n\n1.  Download the HWSD total sand content data for the extent of Switzerland following the tutorial example. Visualize/plot the data as a simple map.\n2.  Download the HWSD topsoil silt content for the extent of Switzerland.\n\n#### Dedicated library\n\n1.  Use the {hwsdr} library (a dedicated package for the API) to download the same data. How does this compare to the previous code written?\n2.  List how many data products there are on the ORNL MODIS data repository.\n3.  Download the MODIS land cover map for the canton of Bern.\n",
    "supporting": [
      "data_variety_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}