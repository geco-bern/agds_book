{
  "hash": "9be82f7e06a0fe9e51c7c7db2653120f",
  "result": {
    "markdown": "# Data wrangling {#sec-datawrangling}\n\n**Chapter lead author: Benjamin Stocker**\n\n## Learning objectives\n\nIn this chapter you will learn how to manipluate and transform data, a curcial part of the data science workflow.\n\nYou will learn how to:\n\n-   read and transform tabulated datas\n-   understand the 'tidy' data concept\n-   select variables\n-   Aggregate data\n-   handle bad and/or missing data\n\n\n## Setup\nIn this Chapter, we will need the following libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(stringr)\nlibrary(purrr)\n```\n:::\n\n## Tutorial\n\nExploratory data analysis - the transformation, visualization, and modelling of data - is the central part of any (geo-) data science workflow and typically takes up a majority of the time we spend on a research project. The transformation of data often turns out to be particularly (and often surprisingly) time-demanding. Therefore, it is key to master typical steps of data transformation, and to implement them in a transparent fashion and efficiently - both in terms of robustness against coding errors (\"bugs\") and in terms of code execution speed.\n\nWe refer to data *wrangling* here to encompass the steps for preparing the data set *prior* to modelling - including, the combination of variables from different data sources, the removal of bad data, and the aggregation of data to the desired resolution or granularity (e.g., averaging over all time steps in a day, or over all replicates in a sample).\n\nIn contrast, *pre-processing* refers to the additional steps that are either required by the the specific machine learning algorithm used with the data (e.g., centering and scaling for K-Nearest Neighbors or Neural Networks), the gap-filling of variables, or the transformation of variables guided by the resulting improvement of the predictive power of the machine learning model. Pre-processing is part of the modelling workflow and includes all steps that apply transformations that use parameters derived from the data. We will introduce and discuss data pre-processing in @sec-supervisedmli.\n\n### Example data\n\nThe example data used in this chapter are parallel time series of (gaseous) CO$_2$ and water vapor exchange fluxes between the vegetation and the atmosphere, along with various meteorological variables measured in parallel. Quasi-continuous measurements of temporally changing gas exchange fluxes are obtained with the eddy covariance technique which relies on the parallel quantification of vertical wind speeds and gas concentrations.\n\nThe data are provided at half-hourly resolution for the site [CH-Lae](https://www.swissfluxnet.ethz.ch/index.php/sites/ch-lae-laegeren/site-info-ch-lae/), located on the south slope of the Lägern mountain on the Swiss Plateau at 689 m a.s.l. in a mixed forest with a distinct seasonal course of active green leaves (a substantial portion of the trees in the measured forest are deciduous). The dataset is generated and formatted following standard protocols ([FLUXNET2015](https://fluxnet.org//data/fluxnet2015-dataset/)). For more information of the variables in the dataset, see the [FLUXNET2015 website](http://fluxnet.fluxdata.org/data/fluxnet2015-dataset/) and [Pastorello et al., 2020](https://www.nature.com/articles/s41597-020-0534-3) for a comprehensive documentation of variable definitions and methods.\n\nFor our demonstrations, the following variables are the most relevant:\n\n-   `TIMESTAMP_START`: Hour and day of the start of the measurement period for which the respective row's data are representative. Provided in a format of \"YYYYMMDDhhmm\".\n-   `TIMESTAMP_END`: Hour and day of the end of the measurement period for which the respective row's data are representative. Provided in a format of \"YYYYMMDDhhmm\".\n-   `TA_*` (°C): Air temperature.\n-   `SW_IN_*` (W m$^{-2}$): Shortwave incoming radiation\n-   `LW_IN_*` (W m$^{-2}$): Longwave incoming radiation\n-   `VPD_*` (hPa): Vapor pressure deficit (the difference between actual and saturation water vapor pressure)\n-   `PA_*` (kPa): Atmospheric pressure\n-   `P_*` (mm): Precipitation\n-   `WS_*` (m $^{-1}$): Wind speed\n-   `SWC_*` (%): Volumetric soil water content\n-   `GPP_*` ($\\mu$mol CO$_2$ m$^{-2}$ s$^{-1}$): Gross primary production (the ecosystem-level gross CO$_2$ uptake flux driven by photosynthesis)\n-   `*_QC`: Quality control information for the variable `*`. Important for us: `NEE_*_QC` is the quality control information for the net ecosystem CO$_2$ exchange flux (`NEE_*`) and for GPP derived from the corresponding NEE estimate (`GPP_*`). 0 = measured, 1 = good quality gap-filled, 2 = medium, 3 = poor.\n\nSuffixes `_*` indicate that multiple estimates for respective variables are available and distinguished by different suffixes. For example, variables `TA_*` contain the same information, but are derived with slightly different assumptions and gap-filling techniques. The meanings of suffixes are described in [Pastorello et al., 2020](https://www.nature.com/articles/s41597-020-0534-3).\n\n### Tidyverse\n\nThe tidyverse is a collection of R packages and functions that share a common design philosophy, enabling a particularly efficient implementation of transformation steps on tabular data. The most important data and function design principle of the tidyverse is that each function takes a data frame as its first argument and returns a data frame as its output.\n\n<!-- Working on a (geo-) data science project, we want to efficiently progress through the multiple circles of exploratory data analysis. The following aspects are particularly important for fast and error-free progression. First, the programming language should be conducive of fast, intuitive, and error-free coding. Second, code that we have written once should be legible by others and by our future selves (even after a long holiday or after the manuscript has been seen by all reviewers months after we finished the analysis for our initial submission). It's the daily reality of us (geo-) data scientist that the code we write is harder to read than text in a newspaper, and that it will have bugs. There is (so far) no magic solution to this. But the R tidyverse comes close.  -->\n\nFrom this design principles, even the most convoluted code and implementation of data transformation steps fall into place and fast and error-free progression through exploratory data analysis is facilitated. Therefore, you will be introduced to the R {tidyverse} here and we heavily rely on this *dialect* of the R language throughout the remainder of this course.\n\n### Reading tabular data\n\nTabular data are organised in rows and columns. R data frames are tabular data. As introduced in @sec-gettingstarted, each column can be regarded as a vector of a certain type. Each row contains the same number of columns and each column contains the same type of values (for example numeric, or characters). Each row can be regarded as a separate instance or data record - for example a record of simultaneously taken measurements of different variables, along with some attributes and meta information (e.g., the date). In @sec-datavariety, you will be introduced to other types of data.\n\nThe most common format for tabular data are CSV (comma-separated-values), typically indicated by the file name suffix `.csv`. CSV is a text-based file format, readable across platforms and does not rely on proprietary software (as opposed to, for example, `.xlsx`). The first row in a CSV file typically specifies the name of the variable provided in the respective column.\n\nLet's get started with working with our example data set and read it into R, as the variable `half_hourly_fluxes`. Note that the naming of variables can be important for keeping code legible. Chose intuitively understandable names that describe what the object represents (as done here).\n\nTo import the data into the R environment, we use the function `read_csv()` from the {readr} package (part of tidyverse). In other R code, you will also encounter the base R `read.csv()` function. However, `read_csv()` is much faster and reads data into a tidyverse-data frame (a *tibble*) which has some useful additional characteristics, on top of a common R data frame. For example, *tibbles* generate a nicely readable output when printing the object as is done below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes <- readr::read_csv(\"./data/FLX_CH-Lae_FLUXNET2015_FULLSET_HH_2004-2006.csv\")\nhalf_hourly_fluxes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 52,608 × 235\n   TIMESTAMP_START TIMESTAMP_END TA_F_MDS TA_F_MDS_QC TA_ERA  TA_F TA_F_QC\n             <dbl>         <dbl>    <dbl>       <dbl>  <dbl> <dbl>   <dbl>\n 1    200401010000  200401010030    -9999       -9999  -2.22 -2.22       2\n 2    200401010030  200401010100    -9999       -9999  -2.25 -2.25       2\n 3    200401010100  200401010130    -9999       -9999  -2.28 -2.28       2\n 4    200401010130  200401010200    -9999       -9999  -2.50 -2.50       2\n 5    200401010200  200401010230    -9999       -9999  -2.72 -2.72       2\n 6    200401010230  200401010300    -9999       -9999  -2.94 -2.94       2\n 7    200401010300  200401010330    -9999       -9999  -3.17 -3.17       2\n 8    200401010330  200401010400    -9999       -9999  -3.39 -3.39       2\n 9    200401010400  200401010430    -9999       -9999  -3.61 -3.61       2\n10    200401010430  200401010500    -9999       -9999  -3.59 -3.59       2\n# ℹ 52,598 more rows\n# ℹ 228 more variables: SW_IN_POT <dbl>, SW_IN_F_MDS <dbl>,\n#   SW_IN_F_MDS_QC <dbl>, SW_IN_ERA <dbl>, SW_IN_F <dbl>, SW_IN_F_QC <dbl>,\n#   LW_IN_F_MDS <dbl>, LW_IN_F_MDS_QC <dbl>, LW_IN_ERA <dbl>, LW_IN_F <dbl>,\n#   LW_IN_F_QC <dbl>, LW_IN_JSB <dbl>, LW_IN_JSB_QC <dbl>, LW_IN_JSB_ERA <dbl>,\n#   LW_IN_JSB_F <dbl>, LW_IN_JSB_F_QC <dbl>, VPD_F_MDS <dbl>,\n#   VPD_F_MDS_QC <dbl>, VPD_ERA <dbl>, VPD_F <dbl>, VPD_F_QC <dbl>, PA <dbl>, …\n```\n:::\n:::\n\n\n> To reproduce this code chunk, you can download the file `FLX_CH-Lae_FLUXNET2015_FULLSET_HH_2004-2006.csv` from [here](https://raw.githubusercontent.com/geco-bern/agds_book/refs/heads/main/book/data/FLX_CH-Lae_FLUXNET2015_FULLSET_HH_2004-2006.csv) and read it from the local path where the file is stored on your machine. All data files used in this tutorials are stored [here](https://github.com/geco-bern/agds/tree/main/data).\n\nSince the file is properly formatted, with variable names given in the first line of the file, the function `read_csv()` identifies them correctly as column names and interprets values in each column as values of a consistent type (as numeric `<dbl>`). The file is also automatically machine-readable because it has no merged cells and only one value per cell.\n\n### Variable selection\n\nFor our further data exploration, we will reduce the data frame we are working with and select a reduced set of variables. Reducing the dataset can have the advantage of speeding up further processing steps, especially when the data are large. For the further steps in this chapter we will now subset our original data. We select the following variants of variables described above, plus some additional variables (further information in [Pastorello et al., 2020](https://www.nature.com/articles/s41597-020-0534-3)):\n\n-   All variables with names starting with `TIMESTAMP`)\n-   All meteorological variables derived following the \"final gap-filled method\", as indicated with names ending with `_F`.\n-   GPP estimates that are based on the nighttime decomposition method, using the \"most representative\" of different gap-filling versions, after having applied the variable u-star filtering method (`GPP_NT_VUT_REF`) and the corresponding quality control information (`NEE_VUT_REF_QC`)\n-   Soil water measured at different depths (variables starting with `SWC_F_MDS_`)\n-   Do not use any radiation variables derived with the \"JSBACH\" algorithm (not with a name that contains the string `JSB`)\n-   Flag indicating whether a time step is at night (`NIGHT`)\n\nThis is implemented by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes <- select(\n  half_hourly_fluxes,\n  starts_with(\"TIMESTAMP\"),\n  ends_with(\"_F\"),\n  GPP_NT_VUT_REF,\n  NEE_VUT_REF_QC,\n  starts_with(\"SWC_F_MDS_\"),\n  -contains(\"JSB\"),\n  NIGHT\n  )\n```\n:::\n\n\nThis reduces our dataset from 235 available variables to 20 variables. As you can see, `select()` is a powerful tool to apply multiple selection criteria on your data frame in one step. It takes many functions that make filtering the columns easier. For example, criteria can be formulated based on the variable names with `starts_with()`, `ends_with()`, `contains()`, `matches()`, etc. Using these functions within `select()` can help if several column names start with the same characters or contain the same pattern and all need to be selected. If a minus (`-`) is added in front of a column name or one of the mentioned functions within `select()`, then R will not include the stated column(s). Note that the selection criteria are evaluated in the order we write them in the `select()` function call. You can find the complete reference for selecting variables [here](https://dplyr.tidyverse.org/reference/select.html).\n\n### Time objects\n\nThe automatic interpretation of the variables `TIMESTAMP_START` and `TIMESTAMP_END` by the function `read_csv()` is not optimal:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(half_hourly_fluxes$TIMESTAMP_START[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nas.character(half_hourly_fluxes$TIMESTAMP_START[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"200401010000\"\n```\n:::\n:::\n\n\nAs we can see, it is considered by R as a numeric variable with 12 digits (\"double-precision\", occupying 64 bits in computer memory). After printing the variable as a string, we can guess that the format is: `YYYYMMDDhhmm`. The {lubridate} package is designed to facilitate processing date and time objects. Knowing the format of the timestamp variables in our dataset, we can use `ymd_hm()` to convert them to actual date-time objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- ymd_hm(half_hourly_fluxes$TIMESTAMP_START)\ndates[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2004-01-01 UTC\"\n```\n:::\n:::\n\n\nWorking with such date-time objects facilitates typical operations on time series. For example, adding one day can be done by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnextday <- dates + days(1)\nnextday[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2004-01-02 UTC\"\n```\n:::\n:::\n\n\nThe following returns the month of each date object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth(dates[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nThe number 1 stands for the month of the year, i.e., January. You can find more information on formatting dates and time within the {tidyverse} [here](https://r4ds.had.co.nz/dates-and-times.html), and a complete reference of the {lubridate} package is available [here](https://lubridate.tidyverse.org/).\n\n### Variable (re-) definition\n\nSince `read_csv()` did not interpret the `TIMESTAMP_*` variables as desired, we may convert the entire column in the data frame into a date-time object. In base-R, we would do this by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes$TIMESTAMP_START <- ymd_hm(half_hourly_fluxes$TIMESTAMP_START)\n```\n:::\n\n\nModifying existing or creating new variables (columns) in a data frame is done in the {tidyverse} using the function `mutate()`. The equivalent statement is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes <- mutate(\n  half_hourly_fluxes,\n  TIMESTAMP_START = ymd_hm(TIMESTAMP_START)\n  )\n```\n:::\n\n\n> Note: Avoid using whitespaces ('Leerzeichen') to name columns in a dataframe because it can cause troubles down the line. Instead, use `_` to separate words in one name.\n\nIn the code chunk above, the function `mutate()` is from the tidyverse package {dplyr}. It takes a dataframe as its first argument (here `half_hourly_fluxes`) and returns a dataframe as its output. You will encounter an alternative, but equivalent, syntax in the following form:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes <- half_hourly_fluxes |> \n  mutate(TIMESTAMP_START = ymd_hm(TIMESTAMP_START))\n```\n:::\n\n\nHere, the **pipe** operator `|>` is used. It \"pipes\" the object evaluated on its left side into the function on its right side, where the object takes the place of (but is not spelled out as) the *first argument* of that function. Using the pipe operator can have the advantage of facilitating the separation, removal, inserting, or re-arranging of individual transformation steps. Arguably, it facilitates reading code, especially for complex data transformation workflows. Therefore, you will encounter the pipe operator frequently throughout the remainder of this course.\n\n> Note: The pipe operator is so popular that has been recently included in the latest versions of base R (version 4.1.0 and beyond). This is the `|>` pipe we just introduced. Nevertheless, you may encounter the `%>%` operator, which is the original pipe from the {magrittr} package (part of the {tidyverse}).\n\n> Note: If you cannot update R and have a version older than 4.1.0, just use the `magrittr` pipe `%>%` throughout. This can happen if you have an older Macbook that can't operate the latest Operating System version.\n\nMutating both our timestamp variables could be written as `mutate(TIMESTAMP_START = ymd_hm(TIMESTAMP_START), TIMESTAMP_END = ymd_hm(TIMESTAMP_END))`. Sometimes, such multiple-variable mutate statements can get quite long. A handy short version of this can be implemented using `across()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes <- half_hourly_fluxes |> \n  mutate(across(starts_with(\"TIMESTAMP_\"), ymd_hm))\n```\n:::\n\n\nWe will encounter more ways to use mutate later in this tutorial. A complete reference to `mutate()` is available [here](https://r4ds.had.co.nz/transform.html#add-new-variables-with-mutate).\n\nIf you only want to change the name of a variable, but not modify its values, you can do so with the {dplyr} function `rename()`.\n\n### Axes of variation\n\nTabular data are two-dimensional (rows $\\times$ columns), but not all two-dimensional data are tabular. For example, raster data are a two-dimensional array of data (a matrix) representing variables on an evenly spaced grid, for example pixels in remotely sensed imagery. For example the `volcano` data (provided as an example dataset in R) is a matrix - each column contains the same variable, and no variable names are provided.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]  100  100  101  101  101\n[2,]  101  101  102  102  102\n[3,]  102  102  103  103  103\n[4,]  103  103  104  104  104\n[5,]  104  104  105  105  105\n```\n:::\n:::\n\n\nIn the `volcano` dataset, rows and columns represent different geographic positions in latitude and longitude, respectively. The `volcano` data are not tabular data. Another typical example for non-tabular data are climate model outputs. They are typically given as *arrays* with more than two dimensions. Typically, this is longitude, latitude, and time, and sometimes a vertical dimension representing, for example, elevation. Such data are multi-dimensional and, as such, not tabular.\n\nTabular data, although formatted in two dimensions by rows and columns, may represent data that varies along multiple axes. Most environmental data are *structured*, that is, values of \"nearby\" observations tend to be more similar than values of \"distant\" observations. Here, \"nearby\" and \"distant\" may refer to a spatial distance, but not necessarily so. Structure in data arises from similarity of the subjects generating the data (e.g., evapotranspiration over two croplands may be more similar than evapotranspiration over a forest), or from temporal proximity. In biological data, there may be a genetic structure arising from evolutionary relatedness ([Roberts et al., 2016](https://onlinelibrary.wiley.com/doi/10.1111/ecog.02881)). Note also that temporal proximity is more complex than than being governed by a single dimension - time. In environmental data, time is often expressed through periodically varying conditions (the diurnal and seasonal cycles). It's often critical to understand and account for the structure in data when analysing it and using it for model fitting. Challenges are posed when structure is not apparent or not known.\n\nNote also that some structures are *hierarchical*. For example, data may be structured by postal codes within cantons; or by hours within a day within a year. Biological data may be generated by species within *genera* within *families*. Data from experiments is typically structured as *samples* within *treatments*. You see, structure in data is rather the rule than the exception.\n\nOur example data contains values recorded at each half-hourly time interval over the course of eleven years (check by `nrow(half_hourly_fluxes)/(2*24*365)`). The data are recorded at a site, located in the temperate climate zone, where solar radiation and therefore also other meteorological variables and ecosystem fluxes vary substantially over the course of a day and over the course of a year. Although not explicitly separated, the date-time object thus encodes information along multiple *axes of variation* in the data. For example, over the course of one day (`2*24` rows in our data), the shortwave incoming radiation `SW_IN_F` varies over a typical diurnal cycle:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  half_hourly_fluxes[1:(2*24),]$TIMESTAMP_START,\n  half_hourly_fluxes[1:(2*24),]$SW_IN_F,\n  type = \"l\"\n  )\n```\n\n::: {.cell-output-display}\n![](data_wrangling_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n> Note: `plot()` is the very basic of plotting data. In @sec-datavis, you will get introduced to additional methods for visualising data. The argument `type = \"l\"` indicates that we want a line plot, rather than points.\n\nOver the course of an entire year, shortwave incoming radiation varies with the seasons, peaking in summer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  half_hourly_fluxes[1:(365*2*24),]$TIMESTAMP_START,\n  half_hourly_fluxes[1:(365*2*24),]$SW_IN_F,\n  type = \"l\"\n  )\n```\n\n::: {.cell-output-display}\n![](data_wrangling_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nAll data frames have two dimensions, rows and columns. Our data frame is organised along half-hourly time steps in rows. As described above, these time steps belong to different days, months, and years, although these \"axes of variation\" are not reflected by the structure of the data frame object itself and we do not have columns that indicate the day, month or year of each half-hourly time step. This would be redundant information since the date-time objects of columns `TIMESTAMP_*` contain this information. However, for certain applications, it may be useful to separate information regarding these axes of variation more explicitly. For example by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes |>\n  mutate(year = year(TIMESTAMP_START),\n         month = month(TIMESTAMP_START),\n         doy = yday(TIMESTAMP_START)     # day of year\n         ) |>\n  select(TIMESTAMP_START, TIMESTAMP_END, year, month, doy)  # for displaying\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 52,608 × 5\n   TIMESTAMP_START     TIMESTAMP_END        year month   doy\n   <dttm>              <dttm>              <dbl> <dbl> <dbl>\n 1 2004-01-01 00:00:00 2004-01-01 00:30:00  2004     1     1\n 2 2004-01-01 00:30:00 2004-01-01 01:00:00  2004     1     1\n 3 2004-01-01 01:00:00 2004-01-01 01:30:00  2004     1     1\n 4 2004-01-01 01:30:00 2004-01-01 02:00:00  2004     1     1\n 5 2004-01-01 02:00:00 2004-01-01 02:30:00  2004     1     1\n 6 2004-01-01 02:30:00 2004-01-01 03:00:00  2004     1     1\n 7 2004-01-01 03:00:00 2004-01-01 03:30:00  2004     1     1\n 8 2004-01-01 03:30:00 2004-01-01 04:00:00  2004     1     1\n 9 2004-01-01 04:00:00 2004-01-01 04:30:00  2004     1     1\n10 2004-01-01 04:30:00 2004-01-01 05:00:00  2004     1     1\n# ℹ 52,598 more rows\n```\n:::\n:::\n\n\nNote that we used `mutate()` here to create a new variable (column) in the data frame, as opposed to above where we overwrote an existing variable with the same function.\n\n### Tidy data {#tidydata}\n\nData comes in many forms and shapes. For example, Excel provides a playground for even the wildest layouts of information in some remotely tabular form and merged cells as we will see in the [Exercises](#exerciseswrangling). A data frame imposes a relatively strict formatting in named columns of equal length. But even data frames can come in various shapes - even if the information they contain is the same.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_concentration\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36 × 3\n    year month co2_concentration\n   <int> <ord>             <dbl>\n 1  1959 Jan                315.\n 2  1959 Feb                316.\n 3  1959 Mar                316.\n 4  1959 Apr                318.\n 5  1959 May                318.\n 6  1959 Jun                318 \n 7  1959 Jul                316.\n 8  1959 Aug                315.\n 9  1959 Sep                314.\n10  1959 Oct                313.\n# ℹ 26 more rows\n```\n:::\n\n```{.r .cell-code}\nco2_concentration_monthly\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 13\n   year   Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec\n  <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1  1959  315.  316.  316.  318.  318.  318   316.  315.  314.  313.  315.  315.\n2  1960  316.  317.  317.  319.  320.  319.  318.  316.  314   314.  315.  316.\n3  1961  317.  318.  318.  319.  320.  320.  318.  317.  315.  315.  316.  317.\n```\n:::\n\n```{.r .cell-code}\nco2_concentration_yearly\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   month `1959` `1960` `1961`\n   <ord>  <dbl>  <dbl>  <dbl>\n 1 Jan     315.   316.   317.\n 2 Feb     316.   317.   318.\n 3 Mar     316.   317.   318.\n 4 Apr     318.   319.   319.\n 5 May     318.   320.   320.\n 6 Jun     318    319.   320.\n 7 Jul     316.   318.   318.\n 8 Aug     315.   316.   317.\n 9 Sep     314.   314    315.\n10 Oct     313.   314.   315.\n11 Nov     315.   315.   316.\n12 Dec     315.   316.   317.\n```\n:::\n:::\n\n\nThere are advantages for interoperability and ease of use when data frames come with consistent layouts, adhering to certain design principles. We have learned that in tabular data, each row contains the same number of columns and each column contains the same type of values (for example numeric, or characters). And that each row can be regarded as a separate instance of the same type, for example a record of simultaneously taken measurements, along with some attributes. Following these principles strictly leads to *tidy data*. In essence, quoting [Wickham and Grolemund (2017)](https://r4ds.had.co.nz/tidy-data.html), data are tidy if:\n\n-   Each variable has its own column.\n-   Each observation has its own row.\n-   Each value has its own cell.\n\n![Rules for tidy data. Figure from [Wickham and Grolemund (2017)](https://r4ds.had.co.nz/tidy-data.html).](./figures/tidy_data.png){#fig-tidy width=100% fig.align='center'}\n\nThe {tidyr} package provides powerful functions to make data tidy. In the examples above, `co2_concentration_monthly` and and `co2_concentration_yearly` are not tidy. In `co2_concentration_monthly`, the same variable (CO2 concentration) appears in multiple columns. Organising columns by months leads to a \"wide\" table format. We can convert it to a \"long\" format by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_concentration_monthly |> \n  pivot_longer(cols = 2:13, names_to = \"month\", values_to = \"co2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 36 × 3\n    year month   co2\n   <int> <chr> <dbl>\n 1  1959 Jan    315.\n 2  1959 Feb    316.\n 3  1959 Mar    316.\n 4  1959 Apr    318.\n 5  1959 May    318.\n 6  1959 Jun    318 \n 7  1959 Jul    316.\n 8  1959 Aug    315.\n 9  1959 Sep    314.\n10  1959 Oct    313.\n# ℹ 26 more rows\n```\n:::\n:::\n\n\nThis corresponds to the format of `co2_concentration` and is tidy. A long format of data frames is required to visualise data using the plotting functions of the {ggplot2} package which will be introduced in @sec-datavis.\n\nEither way, for certain applications, it may be advantageous to work with a wide format. We can convert from a long to a wide format by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_concentration |> \n  pivot_wider(names_from = year, values_from = co2_concentration)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   month `1959` `1960` `1961`\n   <ord>  <dbl>  <dbl>  <dbl>\n 1 Jan     315.   316.   317.\n 2 Feb     316.   317.   318.\n 3 Mar     316.   317.   318.\n 4 Apr     318.   319.   319.\n 5 May     318.   320.   320.\n 6 Jun     318    319.   320.\n 7 Jul     316.   318.   318.\n 8 Aug     315.   316.   317.\n 9 Sep     314.   314    315.\n10 Oct     313.   314.   315.\n11 Nov     315.   315.   316.\n12 Dec     315.   316.   317.\n```\n:::\n:::\n\n\nWhen seeking, for example, the average CO2 concentration for each month, you may be tempted to work with a wide data frame and treat it as a matrix to calculate a mean by rows. You can do so, but then, you leave the `tidyverse`. This will complicate your life. You'll learn how to perform tidy data aggregation below.\n\nThe concept of tidy data can even be taken further by understanding a \"value\" as any object type, e.g., a list or a data frame. This leads to a list or data frame \"nested\" within a data frame. You will learn more about this below.\n\n### Aggregating data\n\nAggregating data refers to collapsing a larger set of values into a smaller set of values that are derived from the larger set. For example, we can aggregate over all $N$ rows in a data frame ($N\\times M$), calculating the sum for each of the $M$ columns. This returns a data frame ($1 \\times M$) with the same number of columns as the initial data frame, but only one row. Often, aggregations are done not across all rows but for rows within $G$ groups of rows. This yields a data frame ($G \\times M$) with the number of rows corresponding to the number of groups.\n\nLet's say we want to calculate the mean of half-hourly shortwave radiation within each day. We thus have $N$ half-hourly time steps in $G$ days. That is, to aggregate our half-hourly data to daily data by taking a mean. There are two pieces of information needed for an aggregation step: The factor (or \"axis of variation\"), here days, that groups a vector of values for collapsing it into a single value, and the function used for collapsing values, here, the `mean()` function. This function should take a vector as an argument and return a single value as an output. These two steps are implemented by the {dplyr} functions `group_by()` and `summarise()`. The entire aggregation workflow is implemented by the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes <- half_hourly_fluxes |>  \n  mutate(date = as_date(TIMESTAMP_START)) |>  # converts the ymd_hm-formatted date-time object to a date-only object (ymd)\n  group_by(date) |> \n  summarise(SW_IN_F = mean(SW_IN_F))\n```\n:::\n\n\nThe seasonal course can now be more clearly be visualized with the data aggregated to daily values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(daily_fluxes[1:365,]$date, daily_fluxes[1:365,]$SW_IN_F, type = \"l\")\n```\n\n::: {.cell-output-display}\n![](data_wrangling_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nWe can also apply multiple aggregation functions to different variables simultaneously. In the example below, we aggregate half-hourly data to daily data by...\n\n-   taking the daily mean GPP\n\n-   counting the number of half-hourly data points by day\n\n-   counting the number of measured (not gap-filled) data points\n\n-   taking the mean shortwave radiation\n\nFinally, we calculate the fraction of measured underlying half-hourly data from which the aggregation is calculated and we save the daily data frame as a CSV file for later use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes <- half_hourly_fluxes |> \n    mutate(date = as_date(TIMESTAMP_START)) |>   # converts time object to a date object\n    group_by(date) |> \n    summarise(GPP_NT_VUT_REF = mean(GPP_NT_VUT_REF, na.rm = TRUE),\n              n_datapoints = n(), # counts the number of observations per day\n              n_measured = sum(NEE_VUT_REF_QC == 0), # counts the number of actually measured data (excluding gap-filled and poor quality data)\n              SW_IN_F = mean(SW_IN_F, na.rm = TRUE),  # we will use this later\n              .groups = 'drop' # to un-group the resulting data frame\n              ) |> \n    mutate(f_measured = n_measured / n_datapoints) # calculate the fraction of measured values over total observations\nwrite_csv(daily_fluxes, file = \"data/daily_fluxes.csv\")\ndaily_fluxes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,096 × 6\n   date       GPP_NT_VUT_REF n_datapoints n_measured SW_IN_F f_measured\n   <date>              <dbl>        <int>      <int>   <dbl>      <dbl>\n 1 2004-01-01        -0.0138           48          0    38.1          0\n 2 2004-01-02         0.768            48          0    23.9          0\n 3 2004-01-03         0.673            48          0    54.1          0\n 4 2004-01-04        -0.322            48          0    41.7          0\n 5 2004-01-05         0.841            48          0    17.4          0\n 6 2004-01-06         1.22             48          0    40.5          0\n 7 2004-01-07         0.215            48          0    31.6          0\n 8 2004-01-08         1.11             48          0    58.4          0\n 9 2004-01-09         1.44             48          0    11.9          0\n10 2004-01-10         0.364            48          0    27.6          0\n# ℹ 1,086 more rows\n```\n:::\n:::\n\n\nNote that above, we specified the argument `.groups = 'drop'` to \"un-group\" the resulting data frame. The same can also be achieved by a separate function call `ungroup()` after the `summarise()` step.\n\nMore info on how to group values using summarise functions [here](https://r4ds.had.co.nz/transform.html#grouped-summaries-with-summarise), or a summary on the inputs the function [group_by()](https://dplyr.tidyverse.org/reference/group_by.html) and [summarise()](https://dplyr.tidyverse.org/reference/summarise.html) take.\n\nAggregating is related to *nesting* performed by the {tidyr} function `nest()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes |>  \n  mutate(date = as_date(TIMESTAMP_START)) |>\n  group_by(date) |> \n  nest()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,096 × 2\n# Groups:   date [1,096]\n   date       data              \n   <date>     <list>            \n 1 2004-01-01 <tibble [48 × 20]>\n 2 2004-01-02 <tibble [48 × 20]>\n 3 2004-01-03 <tibble [48 × 20]>\n 4 2004-01-04 <tibble [48 × 20]>\n 5 2004-01-05 <tibble [48 × 20]>\n 6 2004-01-06 <tibble [48 × 20]>\n 7 2004-01-07 <tibble [48 × 20]>\n 8 2004-01-08 <tibble [48 × 20]>\n 9 2004-01-09 <tibble [48 × 20]>\n10 2004-01-10 <tibble [48 × 20]>\n# ℹ 1,086 more rows\n```\n:::\n:::\n\n\nHere, the data frame has one row per date and therefore the same number of rows as the data frame `daily_fluxes`, but the data itself is not reduced by a summarising function. Instead, the data are kept at the half-hourly level, but it's nested inside the new column `data`, which now contains a list of half-hourly data frames for each day. This is just a brief perspective of what nesting is about. More is explained in Section @sec-extramaterialwrangling. More comprehensive tutorials on nesting and functional programming are provided in [Altman, Behrman and Wickham (2021)](https://dcl-prog.stanford.edu/) or in [Wickham and Grolemund (2017), Chapter 21](https://r4ds.had.co.nz/iteration.html).\n\n### Data cleaning\n\nData cleaning is often a time-consuming task and decisions taken during data cleaning may be critical for analyses and modelling. In the following, we distinguish between cleaning formats, the identification (and removal) of \"bad\" data, and the gap-filling of missing or removed data. An excellent resource for further reading is the [Quartz Guide to Bad Data](https://github.com/Quartz/bad-data-guide) which provides an overview of how to deal with different types of bad data.\n\n#### Cleaning formats\n\nAs a general principle, we want to have *machine readable* data. Key for achieving machine-readability is that a cell should only contain one value of one type. Hence, for example, character strings should be kept in separate columns (as separate variables) from numeric data. Character strings can impose particular challenges for achieving machine-readability. Typically, they encode categorical or ordinal information, but are prone to spelling inconsistencies or errors that undermine the ordering or categorization. Here are typical examples for challenges working with character strings and lessons for avoiding problems:\n\n-   Often, character strings encode the units of a measurement, and entries may be `c(\"kg m-2\", \"kg/m2\", \"Kg / m2\", \"1000 g m-2\")` . They are all equivalent, but \"the machine\" treats them as non-identical. To clean such data, one may compile a lookup-table to identify equivalent (but not identical) strings. Much better is to specify a consistent treatment of units before data collection.\n\n-   Even if the data are clean and contain a consistently spelled categorical variable in the form of a character string, R doesn't necessarily treat it as categorical. For certain downstream steps of the workflow, it may be necessary to transform such a variable to one of type `factor`. For example, as entries of an unordered categorical variable, we have `unique(df$gender) = c(\"female\", \"male\", \"non-binary\")`. To treat them as categorical and not just mere character strings, we would have to do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df |> dplyr::mutate(gender = as.factor(gender))\n```\n:::\n\n\n-   Character strings may encode ordinal information. For example, entries specify quality control information and are one of `c(\"good quality\", \"fair quality, \"poor quality\")`. A challenge could be that the spelling is inconsistent (`c(\"Good quality\", \"good quality\", …)`). Using integers (positive natural numbers) instead of character strings avoids such challenges and enforces an order. The quality control variable `NEE_VUT_REF_QC` in our example dataset `half_hourly_fluxes` follows this approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(half_hourly_fluxes$NEE_VUT_REF_QC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2 1 0\n```\n:::\n:::\n\n\n-   An entry like `>10 m` is not a friend of a data scientist. Here, we have three pieces of information: `>` as in \"greater than\", `10`, and `m` indicating the units. A machine-readable format would be obtained by creating separate columns for each piece of information. The `>` should be avoided already at the stage of recording the data. Here, we may have to find a solution for encoding it in a machine readable manner (see [Exercises](#exerciseswrangling)).\n\n<!-- -   Can you think of more such examples? (-\\> Exercises)  -->\n\nString manipulations are usually required for cleaning data. The @sec-strings below demonstrates some simple examples.\n\nNote that a majority of machine learning algorithms and other statistical model types require all data to be numeric. Methods exist to convert categorical data into numeric data, as we will learn later. We re-visit data cleaning in the form of data *pre-processing* as part of the modelling workflow in @sec-supervisedmli.\n\n#### Bad data {#sec-baddata}\n\nData may be \"bad\" for different reasons, including sensor error, human error, a data point representing a different population, or unsuitable measurement conditions. In this sense, data are \"bad\" if they don't represent what they are assumed by the user to represent. Its presence in analyses and modelling may undermine the model skill or even lead to spurious results. A goal of data cleaning typically is to remove bad data. But how to detect them? And how safe is it to remove them?\n\nA diversity of processes may generate bad data and it is often not possible to formulate rules and criteria for their identification *a priori*. Therefore, an understanding of the data and the data generation processes is important for the identification and treatment of bad data. Often, such an understanding is gained by repeated exploratory data analysis cycles, involving the visualization, transformation, and analysis of the data.\n\nIdeally, information about the quality of the data are provided as part of the dataset. Also other meta-information (e.g., sensor type, human recording the data, environmental conditions during the data collection) may be valuable for data cleaning purposes. In our example dataset, the column with suffices `_QC` provide such information (see 'Example data' section above) and an example for their use in data cleaning is given further below.\n\nBad data may come in the form of *outliers*, which are commonly defined based on their value with respect to the *distribution* of all values of the same variable in a dataset. Hence, their identification most commonly relies on quantifying their distance from the center of the variable's empirical distribution. The default `boxplot()` plotting function in R (which we will learn about more in @sec-datavis) shows the median (bold line in the center), the upper and lower quartiles (corresponding to the 25% and the 75% quantiles, often referred to as $Q_1$ and $Q_3$ , given by the upper and lower edge of the box plot) and the range of $( Q_1 - 1.5 (Q_3 - Q_1), Q_3 + 1.5 (Q_3 - Q_1))$. Any point outside this range is plotted by a circle and labeled an \"outlier\". However, this definition is very restrictive and may lead to a false labeling of outliers, in particular if they are drawn from a distribution with a fat tail or from asymmetrical distributions.\n\nOutliers may also be identified via multivariate distributions. We will re-visit such methods later, in @sec-regressionclassification. For certain applications, outliers or *anomalies* may be the target of the investigation, not the noise in the data. This has spurred the field of [*anomaly detection*](https://en.wikipedia.org/wiki/Anomaly_detection) which relies on machine learning algorithms for determining whether a value is anomalous, given a set of covariates.\n\nSensor error or algorithm error may generate spurious values, identified, for example when a continuous variable attains the numerically identical value with a spuriously high frequency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes$GPP_NT_VUT_REF |> \n  table() |> \n  sort(decreasing = TRUE) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 5.18422  3.54996   1.3107 -5.57199 0.984756  2.49444 \n      32       22       19       18       17       17 \n```\n:::\n:::\n\n\nThe probability of a certain numeric value of a continuous variable to appear twice in a dataset is practically zero. Here, several values appear multiple times - the value `5.18422` even 32 times! This must be bad data.\n\nOther processes may lead to spurious trends or *drift* in the data, for example caused by sensor degradation. Spurious *step changes* or *change points* in time series or in (multivariate) regressions may be related to the replacement or deplacement of the measuring device. Different methods and R libraries help identifying such cases (see for example [this](https://www.marinedatascience.co/blog/2019/09/28/comparison-of-change-point-detection-methods/) tutorial). Solutions have to be found for the remediation of such spurious patterns in the data on a case-by-case basis.\n\n#### Handling missing data\n\nThe question about when data are \"bad\" and whether to remove it is often critical. Such decisions are important to keep track of and should be reported as transparently as possible in publications. In reality, where the data generation process may start in the field with actual human beings writing notes in a lab book, and where the human collecting the data is often not the same as the human analyzing the data or writing the paper, it's often more difficult to keep track of such decisions. As a general principle, it is advisable to design data records such that decisions made during the data collection process remain transparent throughout all stages of the workflow and that sufficient information be collected to enable later revisions of particularly critical decisions. In practice, this means that the removal of data and entire rows should be avoided and implemented only at the very last step if necessary (e.g., when passing the data into a model fitting function). Instead, information about whether data are bad should be kept in a separate, categorical, variable (a *quality control* variable, like `*_QC` variables in our example data `half_hourly_fluxes`).\n\nData may be missing for several reasons. Some yield random patterns of missing data, others not. In the latter case, we can speak of *informative missingness* ([Kuhn and Johnson, 2019](http://www.feat.engineering/)) and its information can be used for modelling. For categorical data, we may replace such data with `\"none\"` (instead of `NA`). Some machine learning algorithms (mainly tree-based methods, e.g., Random Forest) can handle missing values. However, when comparing the performance of alternative ML algorithms, they should be tested with the same data and removing missing data should be done beforehand.\n\nMost machine learning algorithms require missing values to be removed. That is, if any of the cells in one row has a missing value, the entire cell gets removed. This generally leads to a loss of information contained in the remaining variables. Methods exist to *impute* missing values in order to avoid this information loss. However, the gain of data imputation has to be traded off against effects of associating the available variables with the imputed (knowingly wrong) values, and effects of *data leakage* have to be considered. Data imputation as part of the modelling process will be dealt with in @sec-supervisedmli.\n\nIn our example dataset, some values of `SWC_F_MDS_*` are given as `-9999`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes |> \n  select(TIMESTAMP_START, starts_with(\"SWC_F_MDS_\")) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  TIMESTAMP_START     SWC_F_MDS_1 SWC_F_MDS_2 SWC_F_MDS_3 SWC_F_MDS_4\n  <dttm>                    <dbl>       <dbl>       <dbl>       <dbl>\n1 2004-01-01 00:00:00       -9999       -9999       -9999       -9999\n2 2004-01-01 00:30:00       -9999       -9999       -9999       -9999\n3 2004-01-01 01:00:00       -9999       -9999       -9999       -9999\n4 2004-01-01 01:30:00       -9999       -9999       -9999       -9999\n5 2004-01-01 02:00:00       -9999       -9999       -9999       -9999\n6 2004-01-01 02:30:00       -9999       -9999       -9999       -9999\n# ℹ 4 more variables: SWC_F_MDS_1_QC <dbl>, SWC_F_MDS_2_QC <dbl>,\n#   SWC_F_MDS_3_QC <dbl>, SWC_F_MDS_4_QC <dbl>\n```\n:::\n:::\n\n\nWhen reading the documentation of this specific dataset, we learn that `-9999` is the code for *missing data*. The {dplyr} functions help us to clarify these missing values by mutating across all numeric variables and overwrite entries with `NA` if they hold a `-9999`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes <- half_hourly_fluxes |>  \n  mutate(across(where(is.numeric), ~na_if(., -9999)))\n\nhalf_hourly_fluxes |> \n  select(TIMESTAMP_START, starts_with(\"SWC_F_MDS_\")) |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 9\n  TIMESTAMP_START     SWC_F_MDS_1 SWC_F_MDS_2 SWC_F_MDS_3 SWC_F_MDS_4\n  <dttm>                    <dbl>       <dbl>       <dbl>       <dbl>\n1 2004-01-01 00:00:00          NA          NA          NA          NA\n2 2004-01-01 00:30:00          NA          NA          NA          NA\n3 2004-01-01 01:00:00          NA          NA          NA          NA\n4 2004-01-01 01:30:00          NA          NA          NA          NA\n5 2004-01-01 02:00:00          NA          NA          NA          NA\n6 2004-01-01 02:30:00          NA          NA          NA          NA\n# ℹ 4 more variables: SWC_F_MDS_1_QC <dbl>, SWC_F_MDS_2_QC <dbl>,\n#   SWC_F_MDS_3_QC <dbl>, SWC_F_MDS_4_QC <dbl>\n```\n:::\n:::\n\n\nThis lets us visualise the data and its gaps with `vis_miss()` from the {visdat} package. Visualising missing data can be informative for making decisions about dropping rows with missing data versus removing predictors from the analysis (which would imply too much data removal).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisdat::vis_miss(\n  half_hourly_fluxes |> slice(1:10000),\n  cluster = FALSE, \n  warn_large_data = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](data_wrangling_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nFor many applications, we want to filter the data so that the values of particular variables satisfy certain conditions. The {dplyr} function used for such tasks is `filter()`. As argument, it takes the expressions that specify the criterion for filtering using logical operators (`>, >=, <, ==, !-, ...`, see @sec-gettingstarted). Multiple filtering criteria can be combined with logical (boolean) operators:\n\n-   `&`: logical AND\n-   `|`: logical OR\n-   `!` logical NOT\n\nFor example, if we wanted only those rows in our data where NEE is based on measured or good quality gap-filled NEE data, we write:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes |>\n  filter(NEE_VUT_REF_QC == 0 | NEE_VUT_REF_QC == 1)\n```\n:::\n\n\nFor evaluating multiple OR operations simultaneously, we can write alternatively and equivalently:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes |>\n  filter(NEE_VUT_REF_QC %in% c(0,1))\n```\n:::\n\n\nNote that `filter()` removes entire rows. In some cases this is undesired and it is preferred to replace bad quality values with `NA`. It is important to note that specifying a value as missing is information itself. Dropping an entire row leads to the loss of this information. For cases where we do not want to drop entire rows when applying `filter()`, we can just replace certain values with `NA`. In our case, where we want to retain only data where NEE is based on actual measurements or good quality gap-filling, we can do this by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes |> \n    mutate(GPP_NT_VUT_REF = ifelse(NEE_VUT_REF_QC %in% c(0,1), GPP_NT_VUT_REF, NA))\n```\n:::\n\n\nIf we decide to drop a row containing `NA` in any of the variables later during the workflow, we can do this, for example using the useful {tidyr} function `drop_na()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhalf_hourly_fluxes |> \n  drop_na()\n```\n:::\n\n\nAn excellent source for a more comprehensive introduction to missing data handling is given in [Kuhn and Johnson (2019)](https://bookdown.org/max/FES/handling-missing-data.html).\n\n### Writing data to CSV\n\nAfter having applied some data reduction and cleaning steps above, let's save the data frame in the form of a CSV file for use in later chapters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(half_hourly_fluxes, file = \"data/FLX_CH-Lae_FLUXNET2015_FULLSET_HH_2004-2006_CLEAN.csv\")\n```\n:::\n\n\n> Note: Making a file publicly available as a `.rds` or `.RData` file (explained in @sec-gettingstarted) violates the open science principles (introduced in @sec-openscience). These two formats make it very easy to save R objects related to your analysis project, but are not adequate to save *data*. Therefore, whenever possible, save your data in a format that is readable across platforms without requiring proprietary software. Hence use `write_csv()` from {readr} whenever possible. We will encounter other non-proprietary formats that let you save and share more complex data structures in @sec-datavariety.\n\n### Combining relational data\n\nOften, data are spread across multiple files and tables and need to be combined for the planned analysis. In the simplest case, data frames have an identical number of columns, arranged in the same order, and we can \"stack\" them along rows:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_conc_subset_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  month `1959` `1960` `1961`\n  <ord>  <dbl>  <dbl>  <dbl>\n1 Jan     315.   316.   317.\n2 Feb     316.   317.   318.\n3 Mar     316.   317.   318.\n4 Apr     318.   319.   319.\n5 May     318.   320.   320.\n6 Jun     318    319.   320.\n```\n:::\n\n```{.r .cell-code}\nco2_conc_subset_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  month `1959` `1960` `1961`\n  <ord>  <dbl>  <dbl>  <dbl>\n1 Jul     316.   318.   318.\n2 Aug     315.   316.   317.\n3 Sep     314.   314    315.\n4 Oct     313.   314.   315.\n5 Nov     315.   315.   316.\n6 Dec     315.   316.   317.\n```\n:::\n\n```{.r .cell-code}\nbind_rows(co2_conc_subset_1, co2_conc_subset_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   month `1959` `1960` `1961`\n   <ord>  <dbl>  <dbl>  <dbl>\n 1 Jan     315.   316.   317.\n 2 Feb     316.   317.   318.\n 3 Mar     316.   317.   318.\n 4 Apr     318.   319.   319.\n 5 May     318.   320.   320.\n 6 Jun     318    319.   320.\n 7 Jul     316.   318.   318.\n 8 Aug     315.   316.   317.\n 9 Sep     314.   314    315.\n10 Oct     313.   314.   315.\n11 Nov     315.   315.   316.\n12 Dec     315.   316.   317.\n```\n:::\n:::\n\n\nIn other cases, data frames may have an identical set of rows (and arranged in the same order) and we can \"stack\" them along columns.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_conc_subset_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n   month `1959` `1960`\n   <ord>  <dbl>  <dbl>\n 1 Jan     315.   316.\n 2 Feb     316.   317.\n 3 Mar     316.   317.\n 4 Apr     318.   319.\n 5 May     318.   320.\n 6 Jun     318    319.\n 7 Jul     316.   318.\n 8 Aug     315.   316.\n 9 Sep     314.   314 \n10 Oct     313.   314.\n11 Nov     315.   315.\n12 Dec     315.   316.\n```\n:::\n\n```{.r .cell-code}\nco2_conc_subset_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n   month `1961`\n   <ord>  <dbl>\n 1 Jan     317.\n 2 Feb     318.\n 3 Mar     318.\n 4 Apr     319.\n 5 May     320.\n 6 Jun     320.\n 7 Jul     318.\n 8 Aug     317.\n 9 Sep     315.\n10 Oct     315.\n11 Nov     316.\n12 Dec     317.\n```\n:::\n\n```{.r .cell-code}\nbind_cols(co2_conc_subset_3, co2_conc_subset_4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `month` -> `month...1`\n• `month` -> `month...4`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 5\n   month...1 `1959` `1960` month...4 `1961`\n   <ord>      <dbl>  <dbl> <ord>      <dbl>\n 1 Jan         315.   316. Jan         317.\n 2 Feb         316.   317. Feb         318.\n 3 Mar         316.   317. Mar         318.\n 4 Apr         318.   319. Apr         319.\n 5 May         318.   320. May         320.\n 6 Jun         318    319. Jun         320.\n 7 Jul         316.   318. Jul         318.\n 8 Aug         315.   316. Aug         317.\n 9 Sep         314.   314  Sep         315.\n10 Oct         313.   314. Oct         315.\n11 Nov         315.   315. Nov         316.\n12 Dec         315.   316. Dec         317.\n```\n:::\n:::\n\n\nBut beware! In particular the stacking along columns (`bind_cols()`) is very error-prone and should be avoided. Since a *tidy* data frame regards each row as an instance of associated measurements, the rows of the two data frames and their order must match exactly. Otherwise, an error is raised or (even worse) rows get associated when they shouldn't be. In such cases, where information about a common set of observations is distributed across multiple data objects, we are dealing with *relational data*. The key for their combination (or \"merging\") is the *join variable* - the column that is present in both data frames and which contains values along which the merging of the two data frames is performed. In our example from above, this is `month`, and we can use the {dplyr} function `left_join()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nco2_conc_subset_3 |>\n  slice(sample(1:n(), replace = FALSE)) |>  # re-shuffling rows\n  left_join(co2_conc_subset_4, by = \"month\") |> \n  arrange(month)  # sort in ascending order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   month `1959` `1960` `1961`\n   <ord>  <dbl>  <dbl>  <dbl>\n 1 Jan     315.   316.   317.\n 2 Feb     316.   317.   318.\n 3 Mar     316.   317.   318.\n 4 Apr     318.   319.   319.\n 5 May     318.   320.   320.\n 6 Jun     318    319.   320.\n 7 Jul     316.   318.   318.\n 8 Aug     315.   316.   317.\n 9 Sep     314.   314    315.\n10 Oct     313.   314.   315.\n11 Nov     315.   315.   316.\n12 Dec     315.   316.   317.\n```\n:::\n:::\n\n\nNote that here, we first re-shuffled (permuted) the rows of `df6` for demonstration purposes, and arranged the output data frame again by `month` - an ordinal variable. `left_join()` is not compromised by the order of the rows, but instead relies on the join variable, specified by the argument `by = \"month\"`, for associating (merging, joining) the two data frames. In some cases, multiple columns may act as the joining variables in their combination (for example `by = c(\"year\", \"month\")`).\n\nOther variants of `*_join()` are available as described [here](https://r4ds.had.co.nz/relational-data.html).\n\n## Extra material {#sec-extramaterialwrangling}\n\n### Functional programming I\n\nAbove, we read a CSV table into R and applied several data transformation steps. In practice, we often have to apply the same data transformation steps repeatedly over a set of similar objects. This *extra material* section outlines an example workflow for demonstrating how to efficiently work with lists of similar objects - in particular, lists of data frames.\n\nOur aim is to read a set of files into R data frames and apply transformation steps to each data frame separately. Here, we will work with daily data, not half-hourly data. The daily data contains largely identical variables with consistent naming and units as in the half-hourly data (description above). Let's start by creating a list of paths that point to the files with daily data. They are all located in the directory `\"./data\"` and share a certain string of characters in their file names `\"_FLUXNET2015_FULLSET_DD_\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_files <- list.files(\"./data\", pattern = \"_FLUXNET2015_FULLSET_DD_\", full.names = TRUE)\nprint(vec_files)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\"\n[2] \"./data/FLX_CH-Lae_FLUXNET2015_FULLSET_DD_2004-2014_1-4.csv\"\n[3] \"./data/FLX_FI-Hyy_FLUXNET2015_FULLSET_DD_1996-2014_1-3.csv\"\n[4] \"./data/FLX_FR-Pue_FLUXNET2015_FULLSET_DD_2000-2014_2-3.csv\"\n```\n:::\n:::\n\n\n> To reproduce this code chunk, you can download the files  `FLX_CH-Lae_FLUXNET2015_FULLSET_HH_2004-2006.csv` from [here](https://github.com/geco-bern/agds/tree/main/data) and read it from the local path where the file is stored on your machine.\n\n`vec_files` is now a vector of three files paths as character strings. To read in the three files and combine the three data frames (`list_df` below) into a list of data frames, we could use a `for` loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_df <- list()\nfor (ifil in vec_files){\n  list_df[[ifil]] <- read_csv(ifil)\n}\n```\n:::\n\n\nRepeatedly applying a function (here `read_csv()`) over a list similar objects is facilitated by the `map*()` family of functions from the {purrr} package. An (almost) equivalent statement is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_df <- purrr::map(as.list(vec_files), ~read_csv(.))\n```\n:::\n\n\nHere, `purrr::map()` applies the function `read_csv()` to elements of a *list*. Hence, we first have to convert the vector `vec_files` to a list. A list is always the first argument within the `purrr::map()` function. Note two new symbols (`~` and `.`). The `~` always goes before the function that is repeatedly applied (or \"mapped\") to elements of the list. The `.` indicates where the elements of the list would go if spelled out (e.g., here, `read_csv(.)` would be `read_csv(\"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\")` for the first iteration). The output of `purrr::map()` is again a list. There are many variants of the function `purrr::map()` that each have a specific use. A complete reference for all {purrr} functions is available [here](https://purrr.tidyverse.org/reference/index.html). A useful and more extensive tutorial on {purrr} is available [here](https://www.r-bloggers.com/one-stop-tutorial-on-purrr-package-in-r/).\n\nThe above `purrr::map()` call does not return a *named* list as our `for` loop created. But we can give each element of the returned list of data frames different names by:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(list_df) <- vec_files  # this makes it a named list\n```\n:::\n\n\nNext, we will apply a similar data cleaning procedure to this data set as we did above for half-hourly data. To do so, we \"package\" the individual cleaning steps into a function ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function definition\nclean_data_dd <- function(df){\n\n  df <- df |>\n\n    # select only the variables we are interested in\n    dplyr::select(\n      TIMESTAMP,\n      ends_with(\"_F\"),\n      GPP_NT_VUT_REF,\n      NEE_VUT_REF_QC,\n      starts_with(\"SWC_F_MDS_\"),\n      -contains(\"JSB\")) |> \n\n    # convert to a nice date object\n    dplyr::mutate(TIMESTAMP = lubridate::ymd(TIMESTAMP)) |>\n\n    # set all -9999 to NA\n    dplyr::mutate(across(where(is.numeric), ~na_if(., -9999)))\n  \n  return(df)\n}\n```\n:::\n\n\n... and apply this function to each data frame within our list of data frames:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_df <- purrr::map(list_df, ~clean_data_dd(.))\n```\n:::\n\n\nHaving different data frames as elements of a list may be impractical. Since we read in similarly formatted files and selected always the same variables in each data frame, all elements of the list of data frames `list_df` share the same columns. This suggests that we can collapse our list of data frames and \"stack\" data frames along rows. As described above, this can be done using `bind_rows()` and we can automatically create a new column `\"siteid\"` in the stacked data frame that takes the name of the corresponding list element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes_allsites <- bind_rows(list_df, .id = \"siteid\")\ndaily_fluxes_allsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 23,011 × 21\n   siteid              TIMESTAMP    TA_F SW_IN_F LW_IN_F VPD_F  PA_F   P_F  WS_F\n   <chr>               <date>      <dbl>   <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 ./data/FLX_CH-Dav_… 1997-01-01 -4.57     77.4    223. 0.565  82.6   0.4 0.559\n 2 ./data/FLX_CH-Dav_… 1997-01-02 -3.34     45.6    235. 0.978  82.9   0   1.11 \n 3 ./data/FLX_CH-Dav_… 1997-01-03  0.278    74.1    239. 2.24   82.4   0   2.03 \n 4 ./data/FLX_CH-Dav_… 1997-01-04 -1.88     58.1    250. 1.38   81.7   1.8 1.92 \n 5 ./data/FLX_CH-Dav_… 1997-01-05 -4.96     80.8    248. 1.16   82.3   0   0.407\n 6 ./data/FLX_CH-Dav_… 1997-01-06 -4.48     59.6    237. 0.838  82.7   0   0.466\n 7 ./data/FLX_CH-Dav_… 1997-01-07 -3.15     45.5    234. 1.33   82.9   0   1.03 \n 8 ./data/FLX_CH-Dav_… 1997-01-08 -2.45     76.7    222. 1.87   82.7   0   1.95 \n 9 ./data/FLX_CH-Dav_… 1997-01-09 -2.43     47.6    251. 1.44   82.2   0   0.785\n10 ./data/FLX_CH-Dav_… 1997-01-10 -3.09     39.6    242. 0.776  82.8   0   1.25 \n# ℹ 23,001 more rows\n# ℹ 12 more variables: GPP_NT_VUT_REF <dbl>, NEE_VUT_REF_QC <dbl>,\n#   SWC_F_MDS_1 <dbl>, SWC_F_MDS_2 <dbl>, SWC_F_MDS_3 <dbl>,\n#   SWC_F_MDS_1_QC <dbl>, SWC_F_MDS_2_QC <dbl>, SWC_F_MDS_3_QC <dbl>,\n#   SWC_F_MDS_4 <dbl>, SWC_F_MDS_4_QC <dbl>, SWC_F_MDS_5 <dbl>,\n#   SWC_F_MDS_5_QC <dbl>\n```\n:::\n:::\n\n\nA visualisation of missing data indicates that soil water content data (`SWC_F_MDS_*`) are often missing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a subset of the data\ndaily_fluxex_subset <- daily_fluxes_allsites |>\n  slice(1:10000)\n\n# visualize missing data\nvisdat::vis_miss(\n  daily_fluxex_subset,\n  cluster = FALSE,\n  warn_large_data = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](data_wrangling_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n### Strings {#sec-strings}\n\nThe column `siteid` currently contains strings specifying the full paths of the files that were read in earlier. The next task is to extract the site name from these strings. The file names follow a clear pattern (this also highlights why naming files wisely can often make life a lot simpler).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes_allsites$siteid |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\"\n[2] \"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\"\n[3] \"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\"\n[4] \"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\"\n[5] \"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\"\n[6] \"./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv\"\n```\n:::\n:::\n\n\nThe paths each start with the subdirectory where they are located (`\"./data/\"`), then `\"FLX_\"`, followed by the site name (the first three entries of the table containing data from all sites are for the site `\"CH-Dav\"`), and then some more specifications, including the years that respective files' data cover.\n\nThe [{stringr}](https://stringr.tidyverse.org/) package (part of tidyverse) offers a set of functions for working with strings. [Wikham and Grolemund (2017)](https://r4ds.had.co.nz/strings.html) provide a more comprehensive introduction to working with strings. Here, we would like to extract the six characters, starting at position 12. The function `str_sub()` does that job.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec_sites <- str_sub(vec_files, start = 12, end = 17)\nhead(vec_sites)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CH-Dav\" \"CH-Lae\" \"FI-Hyy\" \"FR-Pue\"\n```\n:::\n:::\n\n\nWe can use this function to mutate all values of column `\"siteid\"`, overwriting it with just these six characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes_allsites <- daily_fluxes_allsites |>\n  mutate(siteid = str_sub(siteid, start = 12, end = 17))\n\ndaily_fluxes_allsites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 23,011 × 21\n   siteid TIMESTAMP    TA_F SW_IN_F LW_IN_F VPD_F  PA_F   P_F  WS_F\n   <chr>  <date>      <dbl>   <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 CH-Dav 1997-01-01 -4.57     77.4    223. 0.565  82.6   0.4 0.559\n 2 CH-Dav 1997-01-02 -3.34     45.6    235. 0.978  82.9   0   1.11 \n 3 CH-Dav 1997-01-03  0.278    74.1    239. 2.24   82.4   0   2.03 \n 4 CH-Dav 1997-01-04 -1.88     58.1    250. 1.38   81.7   1.8 1.92 \n 5 CH-Dav 1997-01-05 -4.96     80.8    248. 1.16   82.3   0   0.407\n 6 CH-Dav 1997-01-06 -4.48     59.6    237. 0.838  82.7   0   0.466\n 7 CH-Dav 1997-01-07 -3.15     45.5    234. 1.33   82.9   0   1.03 \n 8 CH-Dav 1997-01-08 -2.45     76.7    222. 1.87   82.7   0   1.95 \n 9 CH-Dav 1997-01-09 -2.43     47.6    251. 1.44   82.2   0   0.785\n10 CH-Dav 1997-01-10 -3.09     39.6    242. 0.776  82.8   0   1.25 \n# ℹ 23,001 more rows\n# ℹ 12 more variables: GPP_NT_VUT_REF <dbl>, NEE_VUT_REF_QC <dbl>,\n#   SWC_F_MDS_1 <dbl>, SWC_F_MDS_2 <dbl>, SWC_F_MDS_3 <dbl>,\n#   SWC_F_MDS_1_QC <dbl>, SWC_F_MDS_2_QC <dbl>, SWC_F_MDS_3_QC <dbl>,\n#   SWC_F_MDS_4 <dbl>, SWC_F_MDS_4_QC <dbl>, SWC_F_MDS_5 <dbl>,\n#   SWC_F_MDS_5_QC <dbl>\n```\n:::\n:::\n\n\n### Functional programming II\n\nFunctions can be applied to a list of objects of any type. Therefore, `purrr::map()` is a powerful approach to \"iterating\" over multiple instances of the same object type and can be used for all sorts of tasks. In the following, list elements are data frames of daily data and the function `lm()` fits a linear regression model of GPP versus shortwave radiation to each sites' data. We'll learn more about fitting statistical models in R in @sec-regressionclassification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_linmod <- purrr::map(list_df, ~lm(GPP_NT_VUT_REF ~ SW_IN_F, data = .))\n```\n:::\n\n\nNote how the `.` indicates where the elements of `list_df` go when evaluating the `lm()` function. This returns a list of linear model objects (the type of objects returned by the `lm()` function call).\n\nWe can spin the functional programming concept further and apply (or map) the `summary()` function to the `lm`-model objects to get a list of useful statistics and metrics, and then further extract the element `\"r.squared\"` from that list as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_linmod |>\n  purrr::map(summary) |>  # apply the summary() function to each list element\n  map_dbl(\"r.squared\")    # extract R-squared from the list generated by summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n./data/FLX_CH-Dav_FLUXNET2015_FULLSET_DD_1997-2014_1-3.csv \n                                                 0.4201802 \n./data/FLX_CH-Lae_FLUXNET2015_FULLSET_DD_2004-2014_1-4.csv \n                                                 0.5074248 \n./data/FLX_FI-Hyy_FLUXNET2015_FULLSET_DD_1996-2014_1-3.csv \n                                                 0.6415685 \n./data/FLX_FR-Pue_FLUXNET2015_FULLSET_DD_2000-2014_2-3.csv \n                                                 0.3772839 \n```\n:::\n:::\n\n\n`map_dbl()` is a variant of the `purrr::map()` function that returns not a list, but a vector of numeric values of class \"double\" (hence, the name `_dbl`). Note further, that providing a character (`\"r.squared\"`) as an argument instead of an (unquoted) function name, `purrr::map()` extracts the correspondingly named list element, instead of applying a function to a list element.\n\nWhen writing code for an analysis, it's useful, if not essential, to understand the objects we're working with, understand its type and shape, and make sense of the results of simple `print <object>` statements. Data frames are particularly handy as they provide an organisation of data that is particularly intuitive (variables along columns, observations along rows, values in cells). Here, we're dealing with a list of linear model objects. Can such a list fit into the paradigm of *tidy* data frames?\n\nYes, they can. Think of the linear model objects as 'values'. Values don't necessarily have to be scalars, but they can be of any type (class).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(\n  siteid = vec_sites,\n  linmod = list_linmod\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  siteid linmod      \n  <chr>  <named list>\n1 CH-Dav <lm>        \n2 CH-Lae <lm>        \n3 FI-Hyy <lm>        \n4 FR-Pue <lm>        \n```\n:::\n:::\n\n\nThe fact that cells can contain any type of object offers a powerful concept. Instead of a linear model object as in the example above, each cell may even contain another data frame. In such a case, we say that the data frame is no longer *flat*, but *nested*.\n\nThe following creates a nested data frame, where the column `data` is defined by the list of data frames read from files above (`list_df`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(\n  siteid = vec_sites,\n  data = list_df\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  siteid data                 \n  <chr>  <named list>         \n1 CH-Dav <tibble [6,574 × 16]>\n2 CH-Lae <tibble [4,018 × 18]>\n3 FI-Hyy <tibble [6,940 × 20]>\n4 FR-Pue <tibble [5,479 × 10]>\n```\n:::\n:::\n\n\nWe can achieve the same result by directly nesting the flat data frame holding all sites' data (`daily_fluxes_allsites`). This is done by combining the `group_by()`, which we have encountered above when aggregating using `summarise()`, with the function `nest()` from the {tidyr} package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes_allsites |>\n  group_by(siteid) |>\n  nest()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n# Groups:   siteid [4]\n  siteid data                 \n  <chr>  <list>               \n1 CH-Dav <tibble [6,574 × 20]>\n2 CH-Lae <tibble [4,018 × 20]>\n3 FI-Hyy <tibble [6,940 × 20]>\n4 FR-Pue <tibble [5,479 × 20]>\n```\n:::\n:::\n\n\nThe function `nest()` names the nested data column automatically `\"data\"`.\n\nThis structure is very useful. For example, for applying functions over sites' data frames separately (and not over the entire data frame). By combining `purrr::map()` and `mutate()`, we can fit linear models on each site's data frame individually in one go.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes_allsites |>\n  group_by(siteid) |>\n  nest() |>\n  dplyr::mutate(linmod = purrr::map(data, ~lm(GPP_NT_VUT_REF ~ SW_IN_F, data = .)))\n```\n:::\n\n\nThis approach is extremely powerful and lets you stick to working with tidy data frames and use the rows-dimension flexibly. Here, rows are sites and no longer time steps, while the nested data frames in column `\"data\"` have time steps along their rows. The power of nesting is also to facilitate complex aggregation steps over a specified dimension (or axis of variation, here given by `siteid`), where the aggregating function is not limited to taking a vector as input and returning a scalar, as is the case for applications of `summarise()` (see above).\n\nCombining the steps described above into a single workflow, we have:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes_allsites_nested <- daily_fluxes_allsites |>\n  group_by(siteid) |>\n  nest() |>\n  dplyr::mutate(linmod = purrr::map(data, ~lm(GPP_NT_VUT_REF ~ SW_IN_F, data = .))) |>\n  dplyr::mutate(summ = purrr::map(linmod, ~summary(.))) |>\n  dplyr::mutate(rsq = map_dbl(summ, \"r.squared\")) |>\n  arrange(desc(rsq))  # to arrange output, with highest r-squared on top\n\ndaily_fluxes_allsites_nested\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n# Groups:   siteid [4]\n  siteid data                  linmod summ         rsq\n  <chr>  <list>                <list> <list>     <dbl>\n1 FI-Hyy <tibble [6,940 × 20]> <lm>   <smmry.lm> 0.642\n2 CH-Lae <tibble [4,018 × 20]> <lm>   <smmry.lm> 0.507\n3 CH-Dav <tibble [6,574 × 20]> <lm>   <smmry.lm> 0.420\n4 FR-Pue <tibble [5,479 × 20]> <lm>   <smmry.lm> 0.377\n```\n:::\n:::\n\n\nThis code is a demonstration of the power of tidy and nested data frames and for the clarity of the {tidyverse} syntax.\n\nNesting is useful also for avoiding value duplication when joining relational data objects. Above, we nested time series data objects (where time steps and sites are both organised along rows) by sites and got a data frame where only sites are organised along rows, while time steps are nested inside the column `\"data\"`. This now fits the structure of a relational data object (`siteinfo_fluxnet2015`) containing site-specific meta information (also with only sites along rows).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::load(\"data/siteinfo_fluxnet2015.rda\")  # loads siteinfo_fluxnet2015\n```\n:::\n\n\nJoining the nested data frame with site meta information results in a substantially smaller and much handier data frame compared to an alternative, where the site meta information is joined into the un-nested (daily) data frame, and therefore duplicated for each day within sites.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaily_fluxes_allsites_nested_joined <- siteinfo_fluxnet2015 |>\n  rename(siteid = sitename) |>\n  right_join(\n    select(daily_fluxes_allsites_nested, -linmod, -summ, -rsq),\n    by = \"siteid\"\n  )\n\ndaily_fluxes_allsites_joined <- siteinfo_fluxnet2015 |>\n  rename(siteid = sitename) |>\n  right_join(\n    daily_fluxes_allsites,\n    by = \"siteid\"\n  )\n\nprint(paste(\"Flat and joined:\", \n            format(object.size(daily_fluxes_allsites_joined),  \n                   units = \"auto\", \n                   standard = \"SI\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Flat and joined: 5.8 MB\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Nested and joined:\", \n            format(object.size(daily_fluxes_allsites_nested_joined),  \n                   units = \"auto\", \n                   standard = \"SI\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nested and joined: 3.7 MB\"\n```\n:::\n\n```{.r .cell-code}\n# save for later use\nwrite_rds(\n  daily_fluxes_allsites_nested_joined,\n  file = \"data/daily_fluxes_allsites_nested_joined.rds\"\n  )\n```\n:::\n\n\n## Exercises {#exerciseswrangling}\n\n> *Hint*: For all exercises remember the resources we provided on finding help in section @sec-findinghelp.\n\n### Star wars {.unnumbered}\n\n{dplyr} comes with a toy dataset `dplyr::starwars` (just type it into the console to see its content). Have a look at the dataset with `View()`. Play around with the dataset to get familiar with the {tidyverse} coding style. Use (possibly among others) the functions `dplyr::filter()`, `dplyr::arrange()`, `dplyr::pull()`, `dplyr::select()`, `dplyr::desc()` and `dplyr::slice()` to answer the following questions:\n\n-   How many pale characters come from the planets Ryloth and Naboo?\n-   Who is the oldest among the tallest thirty characters?\n-   What is the name of the smallest character and their starship in \"Return of the Jedi\"\n\n> Hint: Use `unnest()` to expand columns that contain lists inside cells. The expansion of such columns creates additional rows in the data frame if the cell contained a list with more than one element.\n\n### Aggregating {.unnumbered}\n\nYou have learned about aggregating in the {tidyverse}. Let's put it in practice.\n\n-   Reuse the code in the tutorial to read, reduce, and aggregate the `half_hourly_fluxes` dataset to the daily scale, calculating the following metrics across half-hourly `VPD_F` values within each day: mean, 25% quantile, and 75% quantile.\n\n-   Retain only the daily data for which the daily mean VPD is among the upper or the lower 10% quantiles.\n\n-   Calculate the mean of the 25% and the mean of the 75% quantiles of half-hourly VPD within the upper and lower 10% quantiles of mean daily VPD.\n\n### Patterns in data quality {.unnumbered}\n\nThe uncleaned dataset `FLX_CH-Lae_FLUXNET2015_FULLSET_HH_2004-2006.csv` holds half-hourly data that is sometimes of poor quality. Investigate whether NEE data quality is randomly spread across hours in a day by calculating the proportion of (i) actually measured data, (ii) good quality gap-filled data, (iii) medium quality data, and (iv) poor quality data within each hour-of-day (24 hours per day).\n\n> Hint: `summarise(total = n())` aggregates by counting the number of values.\n\n> Hint: `summarise(count_0 = sum(x == 0))` aggregates by counting the number of values for which the evaluation is `TRUE`.\n\nInterpret your findings: Are the proportions evenly spread across hours in a day?\n\nPerform an aggregation of the half-hourly GPP data (variable `GPP_NT_VUT_REF`) to daily means of the unmodified data read from file `FLX_CH-Lae_FLUXNET2015_FULLSET_HH_2004-2006.csv`, and from cleaned data where only measured (not gap-filled) data is kept. This yields two data frames with daily GPP data. Calculate the overall mean GPP for the two data frames (across all days in the data frame). Are the overall mean GPP values equal? If not, why?\n\n## Report Exercise {#sec-retidy}\n\n### Analyzing changes in soil organic matter during elevated CO$_2$ experiments {.unnumbered}\n\nOpen Science requires that data underlying published research articles is made available upon publication of the article. A separate aspect is the format of the shared data. Is it provided in an open-access data format? How easy is it to use the data for your own analyses? In this exercise, you will encounter data that was made freely available, but not in an open access format. Although it is \"nice-looking\" data, you will encounter that it is not tidy.\n\nIn this exercise, you will investigate the data published by Groeningen et al. (2014), where they looked at how soil carbon stocks may change due to the anthropogenic increase in $CO_2$. They gathered data on changes in the soil organic matter content from experiments where ecosystems were exposed to elevated CO$_2$ concentrations and your task is to have a high-level look at this dataset. So, perform the following steps:\n\n1.  Download the data file (`.xlsx`) from the Supplementary Material of the following paper: *Groenigen, Kees Jan van, Xuan Qi, Craig W. Osenberg, Yiqi Luo, and Bruce A. Hungate. \"Faster Decomposition Under Increased Atmospheric CO2 Limits Soil Carbon Storage.\" Science 344, no. 6183 (May 2, 2014): 508--9. <https://doi.org/10.1126/science.1249534>.*\n\n2.  Manually clean the data in the tab \"Database S1\" and save it as a CSV file that can be read into R.\n\n    -   \"Database S1\" contains data of soil organic carbon measurements in experiments, where ecosystems are exposed to ambient (low) and elevated (high) CO$_2$ concentrations. The mean soil organic carbon of multiple samples (\"n\") is recorded within each experiment for different sample dates. Information is provided for the time in years since the start of the experiment (\"Time (years)\").\n    <!-- -   _Bonus (not part of the assessment): If you feel like challenging yourself, you could try cleaning the data directly within R and never touching Excel! Can you find a way to do this with `readxl::read_xlsx()`?_ -->\n\n3.  In RStudio, create RMarkdown file. Then, write your code into the R chunks of the file to aggregate the data per experiment and calculate the log-response ratio within each experiment, as specified below.\n\n    -   A log-response ratio can be used to quantify the effect that a treatment (e.g., elevated CO$_2$) can have on your target variable $x$ (e.g., soil organic matter content). The log-response ratio can be calculated as: $\\text{RR} = \\ln \\left( \\frac{x_\\text{elevated}}{x_\\text{ambient}} \\right)$\n\n    -   Aggregate data across all experiments for different years since the start of the experiment, distinguishing an early phase (\\<3 years since start), a mid-phase (3-6 years since start), and a late phase (\\>6 years since start). Calculate the log-response ratio for each phase. Calculate the log-response ratio for each parallel observation of SOC under ambient and elevated CO$_2$, and then aggregate log response ratios by taking their mean (and not the other way round).\n\n    -   Present your results as tables using the `knitr::kable()` function.\n    \n    -   _Tip: Depending on your Excel settings, your exported csv is separated using `,` or `;`. The `read_csv()` function only works with `,`. So, if your file is separated with `;`, either change the export settings or use `read_csv2()`.Where would it have been useful if more information had been available._\n\n4.  Answer the following questions:\n\n    -   What are the data that you are looking at?\n    -   What do you expect your analysis to show, what is your hypothesis? How should soil organic matter content change under elevated CO$_2$?\n    -   Interpret your results after aggregating the data: What do your final numbers mean? Do they support your initial hypothesis? Why so, why not?\n    -   _Tip: Skim the paper and its references to better understand the data and processes you are looking at!``_\n\n### Deliverables for the report {.unnumbered}\n\nA key learning of this course is that you know how to create reproducible workflows and we pay a lot of attention on this during the assessment. You will learn more about the specific aspects to do so in @sec-openscience and @sec-codemgmt. So, if the following instructions for submitting this report exercise may sound cryptic, hang tight! It will make more sense as you work through this course.\n\nYou have to submit all report exercises via your GitHub repository that you created in @sec-setupreport. For now, save this report exercise as a RMarkdown file with the name `re_tidy.Rmd` and place that file in a sub-directory called `vignettes` (a directory is simply a folder), which is located in your project directory (in full notation that means save your RMarkdown as `./vignettes/re_tidy.Rmd`). Additionally, produce a HTML version of your solution by knitting your RMarkdown file (see the `Knit` command in the panel below the files tabs in RStudio). Save this HTML file in the same `vignettes` directory (`./vignettes/re_tidy.html`). For your cleaned dataset, pick a sensible name and put it into a sub-direcory called `./data`. As with all other report exercises, make sure that your work is reproducible, for example, by letting another student download your repository from GitHub and knit your RMarkdown files on their computer.\n\n> **Important**: Structure your RMarkdown so that you first load necessary libraries, load your data and then write down your solution. **Remember to access files with relative paths and not with hard-coded paths**. So, access your file via `here::here('data/tidy_data.csv`), where `here` starts at the position of your `.Rproj` file. **Never** write hard-coded paths that looks like this: `\"~/Desktop/Studium/.../tidy_data.csv\"` or `\"C:/Users/.../tidy_data.csv\"` (see @sec-wspmgmt).\n\n> Tip: Your results do not have to match the results from the paper. It is important that you make your code reproducible, aggregate the data as instructed, and interpret your results.\n    \n> Tip: If you are new to using RMarkdown, check out this [guide](https://www.dataquest.io/blog/r-markdown-guide-cheatsheet/).\n",
    "supporting": [
      "data_wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}